<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ripgrep on zed的博客</title><link>https://www.dust-zed.site/rust/ripgrep/</link><description>Recent content in ripgrep on zed的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 27 Aug 2025 09:07:07 +0800</lastBuildDate><atom:link href="https://www.dust-zed.site/rust/ripgrep/index.xml" rel="self" type="application/rss+xml"/><item><title>Walk整体架构</title><link>https://www.dust-zed.site/rust/ripgrep/walk%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link><pubDate>Wed, 27 Aug 2025 09:07:07 +0800</pubDate><guid>https://www.dust-zed.site/rust/ripgrep/walk%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid><description>&lt;h3 id="walk整体架构设计详解">Walk整体架构设计详解
&lt;/h3>&lt;p>让我们从最核心的设计理念开始，系统地解释walk的整体工作机制。&lt;/p>
&lt;h5 id="1-核心架构三层设计模式">1. 核心架构：三层设计模式
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第一层：构建器 - 配置收集
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>WalkBuilder::new(&lt;span style="color:#e6db74">&amp;#34;/path/to/search&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .max_depth(Some(&lt;span style="color:#ae81ff">5&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .follow_links(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .threads(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第二层：执行器 - 两种模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .build() &lt;span style="color:#75715e">// → Walk (单线程迭代器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .build_parallel() &lt;span style="color:#75715e">// → WalkParallel (并行执行器)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 第三层：数据抽象 - 统一表示
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// → Iterator&amp;lt;Item = Result&amp;lt;DirEntry, Error&amp;gt;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-事件驱动的遍历模型">2. 事件驱动的遍历模型
&lt;/h5>&lt;p>Walk的核心创新是把目录遍历抽象为&lt;strong>事件流&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">WalkEvent&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Dir(walkdir::DirEntry), &lt;span style="color:#75715e">// 进入目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> File(walkdir::DirEntry), &lt;span style="color:#75715e">// 发现文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Exit &lt;span style="color:#75715e">// 退出目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>工作流程&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">/&lt;/span>root&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">├──&lt;/span> file1.txt &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::File(file1.txt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">├──&lt;/span> dir1&lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::Dir(dir1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">├──&lt;/span> file2.txt &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::File(file2.txt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> subdir&lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::Dir(subdir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> file3.txt &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::File(file3.txt)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::Exit (subdir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::Exit (dir1)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> file4.txt &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> WalkEvent::File(file4.txt)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="3-walk-vs-walkparallel的设计差异">3. Walk vs WalkParallel的设计差异
&lt;/h5>&lt;p>&lt;strong>Walk&lt;/strong> - 标准迭代器模式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Iterator &lt;span style="color:#66d9ef">for&lt;/span> Walk {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) -&amp;gt; Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>DirEntry, Error&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 从 WalkEventIter 获取下一个事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> ev &lt;span style="color:#f92672">=&lt;/span> self.it.as_mut().and_then(&lt;span style="color:#f92672">|&lt;/span>it&lt;span style="color:#f92672">|&lt;/span> it.next());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> ev {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(WalkEvent::Dir(ent)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 检查是否应该跳过
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self.skip_entry(&lt;span style="color:#f92672">&amp;amp;&lt;/span>ent)&lt;span style="color:#f92672">?&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.it.skip_current_dir(); &lt;span style="color:#75715e">// 剪枝
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 更新 ignore 规则上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> (ig_new, err) &lt;span style="color:#f92672">=&lt;/span> self.ig.add_child(ent.path());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig &lt;span style="color:#f92672">=&lt;/span> ig_new;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Ok(ent));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(WalkEvent::File(ent)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.skip_entry(&lt;span style="color:#f92672">&amp;amp;&lt;/span>ent)&lt;span style="color:#f92672">?&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Ok(ent));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(WalkEvent::Exit) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4. 恢复父目录的 ignore 上下文
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.ig &lt;span style="color:#f92672">=&lt;/span> self.ig.parent().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>WalkParallel&lt;/strong> - 工作窃取模式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> WalkParallel {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>F&lt;span style="color:#f92672">&amp;gt;&lt;/span>(self, mkf: &lt;span style="color:#a6e22e">F&lt;/span>) &lt;span style="color:#66d9ef">where&lt;/span> F: FnMut() -&amp;gt; Box&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dyn&lt;/span> FnMut(Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>DirEntry, Error&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">WalkState&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Send&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 创建工作窃取队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> stacks &lt;span style="color:#f92672">=&lt;/span> Stack::new_for_each_thread(threads, stack);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 启动多个工作线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> std::thread::scope(&lt;span style="color:#f92672">|&lt;/span>s&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> handles: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> stacks.into_iter().map(&lt;span style="color:#f92672">|&lt;/span>stack&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Worker {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visitor: &lt;span style="color:#a6e22e">mkf&lt;/span>(), &lt;span style="color:#75715e">// 用户回调
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> stack, &lt;span style="color:#75715e">// 工作队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> quit_now, &lt;span style="color:#75715e">// 全局退出标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> active_workers, &lt;span style="color:#75715e">// 活跃工作者计数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ... 其他配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).map(&lt;span style="color:#f92672">|&lt;/span>worker&lt;span style="color:#f92672">|&lt;/span> s.spawn(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">||&lt;/span> worker.run())).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 等待所有线程完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> handle &lt;span style="color:#66d9ef">in&lt;/span> handles { handle.join().unwrap(); }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="4-关键设计模式">4. 关键设计模式
&lt;/h5>&lt;p>&lt;strong>状态管理&lt;/strong>：Ignore规则的层次化&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Walk&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ig_root: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">// 根目录规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ig: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">// 当前目录规则 (随遍历动态变化)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 进入子目录时
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> (ig_new, err) &lt;span style="color:#f92672">=&lt;/span> self.ig.add_child(child_path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>self.ig &lt;span style="color:#f92672">=&lt;/span> ig_new; &lt;span style="color:#75715e">// 继承父目录规则 + 子目录规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 退出目录时
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>self.ig &lt;span style="color:#f92672">=&lt;/span> self.ig.parent().unwrap(); &lt;span style="color:#75715e">// 恢复父目录规则
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>早期过滤优化&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">skip_entry&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, ent: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">DirEntry&lt;/span>) -&amp;gt; Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">bool&lt;/span>, Error&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 优先级顺序 (从快到慢)：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> ent.depth() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> { &lt;span style="color:#66d9ef">return&lt;/span> Ok(&lt;span style="color:#66d9ef">false&lt;/span>); } &lt;span style="color:#75715e">// 1. 根目录检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> should_skip_entry(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self.ig, ent) { &lt;span style="color:#66d9ef">return&lt;/span> Ok(&lt;span style="color:#66d9ef">true&lt;/span>); } &lt;span style="color:#75715e">// 2. ignore 规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> path_equals(ent, stdout) { &lt;span style="color:#66d9ef">return&lt;/span> Ok(&lt;span style="color:#66d9ef">true&lt;/span>); } &lt;span style="color:#75715e">// 3. stdout 检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> skip_filesize(&lt;span style="color:#f92672">..&lt;/span>.) { &lt;span style="color:#66d9ef">return&lt;/span> Ok(&lt;span style="color:#66d9ef">true&lt;/span>); } &lt;span style="color:#75715e">// 4. 文件大小检查
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>filter(ent) { &lt;span style="color:#66d9ef">return&lt;/span> Ok(&lt;span style="color:#66d9ef">true&lt;/span>); } &lt;span style="color:#75715e">// 5. 自定义过滤器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(&lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>工作窃取队列的智能终止&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_work&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) -&amp;gt; Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Work&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.recv() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(Message::Work(work)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(work),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(Message::Quit) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> None,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 关键：原子性检查所有工作者是否都空闲
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> self.deactivate_worker() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 所有工作者都空闲 = 没有更多工作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.send_quit(); &lt;span style="color:#75715e">// 广播退出信号
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> None;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 等待新工作或从其他队列窃取
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.wait_for_work();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="5-整体工作流程总结">5. 整体工作流程总结
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">用户调用&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>WalkBuilder &lt;span style="color:#960050;background-color:#1e0010">收集配置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">选择执行模式：&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">├──&lt;/span> Walk: &lt;span style="color:#960050;background-color:#1e0010">单线程迭代器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">│&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">基于&lt;/span> WalkDir &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">事件转换&lt;/span> &lt;span style="color:#f92672">+&lt;/span> ignore &lt;span style="color:#960050;background-color:#1e0010">过滤&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> WalkParallel: &lt;span style="color:#960050;background-color:#1e0010">并行执行器&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">└──&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">工作窃取队列&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">多线程协作&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">智能终止&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">产生&lt;/span> DirEntry &lt;span style="color:#960050;background-color:#1e0010">流&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">用户处理结果&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>核心优势&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>统一抽象：无论单线程还是并行，用户看到的都是&lt;code>DirEntry&lt;/code>流&lt;/li>
&lt;li>智能过滤：多层次、早期过滤，避免不必要的文件系统操作&lt;/li>
&lt;li>动态适应： ignore规则跟随目录层次动态调整&lt;/li>
&lt;li>高效并行： 工作窃取 + 智能终止，最大化CPU利用率&lt;/li>
&lt;/ul>
&lt;h4 id="walkbuilder构建模式详解">WalkBuilder构建模式详解
&lt;/h4>&lt;h5 id="核心结构设计">核心结构设计
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">WalkBuilder&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paths: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>PathBuf&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 多路径支持
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ig_builder: &lt;span style="color:#a6e22e">IgnoreBuilder&lt;/span>, &lt;span style="color:#75715e">// ignore 规则构建器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> max_depth: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">usize&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 递归深度限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> max_filesize: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">u64&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 文件大小限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> follow_links: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 符号链接跟随
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> same_file_system: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 文件系统边界
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> sorter: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Sorter&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 排序策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> threads: &lt;span style="color:#66d9ef">usize&lt;/span>, &lt;span style="color:#75715e">// 线程数配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> skip: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Arc&lt;span style="color:#f92672">&amp;lt;&lt;/span>Handle&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// stdout 跳过
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> filter: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Filter&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 自定义过滤器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="流畅接口模式的优雅实现">流畅接口模式的优雅实现
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 典型的链式调用模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> walker &lt;span style="color:#f92672">=&lt;/span> WalkBuilder::new(&lt;span style="color:#e6db74">&amp;#34;/path/to/search&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .max_depth(Some(&lt;span style="color:#ae81ff">3&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .follow_links(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .threads(&lt;span style="color:#ae81ff">4&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .standard_filters(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .hidden(&lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .git_ignore(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .build_parallel();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="关键设计模式">关键设计模式
&lt;/h5>&lt;h6 id="1-委托模式">1. 委托模式
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// WalkBuilder 将 ignore 相关配置委托给 IgnoreBuilder
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// WalkDir是基础的文件系统Builder
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">hidden&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, yes: &lt;span style="color:#66d9ef">bool&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig_builder.hidden(yes); &lt;span style="color:#75715e">// 委托给内部构建器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">git_ignore&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, yes: &lt;span style="color:#66d9ef">bool&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig_builder.git_ignore(yes);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="2-分组配置模式">2. 分组配置模式
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">standard_filters&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, yes: &lt;span style="color:#66d9ef">bool&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 一次性配置多个相关选项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.hidden(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .parents(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .ignore(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .git_ignore(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .git_global(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .git_exclude(yes)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="3--策略模式的排序设计">3. 策略模式的排序设计
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">enum&lt;/span> &lt;span style="color:#a6e22e">Sorter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ByName(Arc&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dyn&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>OsStr, &lt;span style="color:#f92672">&amp;amp;&lt;/span>OsStr) -&amp;gt; &lt;span style="color:#a6e22e">Ordering&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Send &lt;span style="color:#f92672">+&lt;/span> Sync &lt;span style="color:#f92672">+&lt;/span> &amp;#39;static&lt;span style="color:#f92672">&amp;gt;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ByPath(Arc&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dyn&lt;/span> Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>Path, &lt;span style="color:#f92672">&amp;amp;&lt;/span>Path) -&amp;gt; &lt;span style="color:#a6e22e">Ordering&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Send &lt;span style="color:#f92672">+&lt;/span> Sync &lt;span style="color:#f92672">+&lt;/span> &amp;#39;static&lt;span style="color:#f92672">&amp;gt;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">sort_by_file_name&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>F&lt;span style="color:#f92672">&amp;gt;&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, cmp: &lt;span style="color:#a6e22e">F&lt;/span>) -&amp;gt; &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> WalkBuilder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">where&lt;/span> F: Fn(&lt;span style="color:#f92672">&amp;amp;&lt;/span>OsStr, &lt;span style="color:#f92672">&amp;amp;&lt;/span>OsStr) -&amp;gt; &lt;span style="color:#a6e22e">Ordering&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Send &lt;span style="color:#f92672">+&lt;/span> Sync &lt;span style="color:#f92672">+&lt;/span> &amp;#39;static
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.sorter &lt;span style="color:#f92672">=&lt;/span> Some(Sorter::ByName(Arc::new(cmp)));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="构建过程的两个关键转换">构建过程的两个关键转换
&lt;/h5>&lt;h6 id="build---单线程迭代器构建">build() - 单线程迭代器构建
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">Walk&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 为每个路径创建 WalkDir 迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> its &lt;span style="color:#f92672">=&lt;/span> self.paths.iter().map(&lt;span style="color:#f92672">|&lt;/span>p&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> wd &lt;span style="color:#f92672">=&lt;/span> WalkDir::new(p);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wd &lt;span style="color:#f92672">=&lt;/span> wd.follow_links(self.follow_links &lt;span style="color:#f92672">||&lt;/span> p.is_file());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> wd &lt;span style="color:#f92672">=&lt;/span> wd.same_file_system(self.same_file_system);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 应用排序策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(&lt;span style="color:#66d9ef">ref&lt;/span> sorter) &lt;span style="color:#f92672">=&lt;/span> self.sorter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> sorter {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sorter::ByName(cmp) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> wd &lt;span style="color:#f92672">=&lt;/span> wd.sort_by(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>a, b&lt;span style="color:#f92672">|&lt;/span> cmp(a.file_name(), b.file_name())),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Sorter::ByPath(cmp) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> wd &lt;span style="color:#f92672">=&lt;/span> wd.sort_by(&lt;span style="color:#66d9ef">move&lt;/span> &lt;span style="color:#f92672">|&lt;/span>a, b&lt;span style="color:#f92672">|&lt;/span> cmp(a.path(), b.path())),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (p.to_path_buf(), Some(WalkEventIter::from(wd)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }).collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 构建 ignore 规则根节点
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> ig_root &lt;span style="color:#f92672">=&lt;/span> self.ig_builder.build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Walk { its, ig_root, &lt;span style="color:#75715e">/* ... */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="build_parallel---并行执行器构建">build_parallel() - 并行执行器构建
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">build_parallel&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">WalkParallel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WalkParallel {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paths: &lt;span style="color:#a6e22e">self&lt;/span>.paths.clone().into_iter(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ig_root: &lt;span style="color:#a6e22e">self&lt;/span>.ig_builder.build(), &lt;span style="color:#75715e">// 共享 ignore 规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> max_depth: &lt;span style="color:#a6e22e">self&lt;/span>.max_depth,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> threads: &lt;span style="color:#a6e22e">self&lt;/span>.threads,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 直接传递配置，无需转换为迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="walkbuilder-构建模式的智能配置管理">WalkBuilder 构建模式的智能配置管理
&lt;/h4>&lt;h6 id="智能默认值处理">智能默认值处理
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> WalkParallel {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">threads&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">usize&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> self.threads &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#75715e">// 智能默认值：最少2个线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.threads
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="配置验证和优化">配置验证和优化
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">visit&lt;/span>(&lt;span style="color:#66d9ef">mut&lt;/span> self, builder: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> &lt;span style="color:#66d9ef">dyn&lt;/span> ParallelVisitorBuilder&lt;span style="color:#f92672">&amp;lt;&lt;/span>&amp;#39;_&lt;span style="color:#f92672">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> threads &lt;span style="color:#f92672">=&lt;/span> self.threads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> stack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 预处理根路径，区分文件和目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> path &lt;span style="color:#66d9ef">in&lt;/span> paths {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> (dent, root_device) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> path &lt;span style="color:#f92672">==&lt;/span> Path::new(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (DirEntry::new_stdin(), None) &lt;span style="color:#75715e">// 特殊处理 stdin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 设备号检查（same_file_system 支持）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> root_device &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.same_file_system {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> device_num(&lt;span style="color:#f92672">&amp;amp;&lt;/span>path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(root_device) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Some(root_device),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 错误处理：单个路径失败不影响其他路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> visitor.visit(Err(err)).is_quit() { &lt;span style="color:#66d9ef">return&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 创建初始 DirEntry
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> DirEntryRaw::from_path(&lt;span style="color:#ae81ff">0&lt;/span>, path, &lt;span style="color:#66d9ef">false&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(dent) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> (DirEntry::new_raw(dent, None), root_device),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> visitor.visit(Err(err)).is_quit() { &lt;span style="color:#66d9ef">return&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 生成初始工作项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> stack.push(Message::Work(Work {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dent,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ignore: &lt;span style="color:#a6e22e">self&lt;/span>.ig_root.clone(), &lt;span style="color:#75715e">// 共享根 ignore 规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> root_device,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 早期退出优化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> stack.is_empty() { &lt;span style="color:#66d9ef">return&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4. 启动工作线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> stacks &lt;span style="color:#f92672">=&lt;/span> Stack::new_for_each_thread(threads, stack);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关键设计模式总结">关键设计模式总结
&lt;/h4>&lt;h5 id="1-分层委托模式">1. 分层委托模式
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>WalkBuilder (&lt;span style="color:#960050;background-color:#1e0010">外层配置&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">委托&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>IgnoreBuilder (ignore &lt;span style="color:#960050;background-color:#1e0010">规则配置&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#960050;background-color:#1e0010">↓&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">构建&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Ignore (&lt;span style="color:#960050;background-color:#1e0010">运行时规则匹配器&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-配置收集与延迟构建">2. 配置收集与延迟构建
&lt;/h5>&lt;ul>
&lt;li>收集阶段： WalkBuilder收集所有配置选项&lt;/li>
&lt;li>验证阶段：build()时进行配置验证和转换&lt;/li>
&lt;li>执行阶段：Walk/WalkParallel使用最终配置执行遍历&lt;/li>
&lt;/ul>
&lt;h5 id="3-多态执行策略">3. 多态执行策略
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> WalkBuilder {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">build&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">Walk&lt;/span> { &lt;span style="color:#75715e">/* 单线程策略 */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">build_parallel&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">WalkParallel&lt;/span> { &lt;span style="color:#75715e">/* 并行策略 */&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="4-错误恢复与部分成功">4. 错误恢复与部分成功
&lt;/h5>&lt;ul>
&lt;li>单个路径失败不影响其他路径的处理&lt;/li>
&lt;li>ignore文件解析错误不阻止遍历继续&lt;/li>
&lt;li>提供详细的错误信息但保持系统健壮性&lt;/li>
&lt;/ul>
&lt;h4 id="walk的文件发现与遍历">Walk的文件发现与遍历
&lt;/h4>&lt;p>&lt;code>Walk&lt;/code>实现了&lt;code>Iterator&lt;/code>trait，其核心是&lt;code>next()&lt;/code>方法，负责文件发现和遍历。&lt;code>Walk&lt;/code>包装了&lt;code>WalkEventIter&lt;/code>，而&lt;code>WalkEventIter&lt;/code>包装了&lt;code>WalkDir&lt;/code>。&lt;code>WalkDir&lt;/code>提供基础的文件系统遍历功能，文件系统的树形结构转化为了线形的Iter；&lt;code>WalkEventDir&lt;/code>则是将&lt;code>WalkDir&lt;/code>转换为&lt;code>WalkEvent&lt;/code>流；&lt;code>Walk&lt;/code>负责添加ignore规则和过滤逻辑。&lt;/p>
&lt;h5 id="1-核心数据结构">1. 核心数据结构
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Walk&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> its: &lt;span style="color:#a6e22e">std&lt;/span>::vec::IntoIter&lt;span style="color:#f92672">&amp;lt;&lt;/span>(PathBuf, Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>WalkEventIter&lt;span style="color:#f92672">&amp;gt;&lt;/span>)&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">//初始路径迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> it: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>WalkEventIter&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">//当前目录迭代器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ig_root: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">//根目录的忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ig: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">//当前目录的忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//...其他字段
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2初始化阶段">2.初始化阶段
&lt;/h5>&lt;ul>
&lt;li>如果当前迭代器it为None，从its获取下一个路径&lt;/li>
&lt;li>如果its也耗尽，返回None表示遍历结束&lt;/li>
&lt;/ul>
&lt;h5 id="3主循环结构">3.主循环结构
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) -&amp;gt; Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>DirEntry, Error&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">loop&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 获取下一个事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 2. 处理事件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// 3. 返回符合条件的文件/目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="4-事件获取逻辑">4. 事件获取逻辑
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> ev &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.it.as_mut().and_then(&lt;span style="color:#f92672">|&lt;/span>it&lt;span style="color:#f92672">|&lt;/span> it.next()) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(ev) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> ev, &lt;span style="color:#75715e">// 有事件则处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> { &lt;span style="color:#75715e">// 当前迭代器耗尽
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.its.next() { &lt;span style="color:#75715e">// 获取下一个路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> None, &lt;span style="color:#75715e">// 所有路径处理完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Some((_, None)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Ok(DirEntry::new_stdin())), &lt;span style="color:#75715e">// 标准输入
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Some((path, Some(it))) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> { &lt;span style="color:#75715e">// 新路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.it &lt;span style="color:#f92672">=&lt;/span> Some(it);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> path.is_dir() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 更新忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> (ig, err) &lt;span style="color:#f92672">=&lt;/span> self.ig_root.add_parents(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig &lt;span style="color:#f92672">=&lt;/span> ig;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(err) &lt;span style="color:#f92672">=&lt;/span> err {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Err(err));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig &lt;span style="color:#f92672">=&lt;/span> self.ig_root.clone(); &lt;span style="color:#75715e">// 重置为根规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>; &lt;span style="color:#75715e">// 继续处理新路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="5事件处理">5.事件处理
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">match&lt;/span> ev {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Err(Error::from_walkdir(err))),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 退出目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(WalkEvent::Exit) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig &lt;span style="color:#f92672">=&lt;/span> self.ig.parent().unwrap(); &lt;span style="color:#75715e">// 恢复父目录的忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(WalkEvent::Dir(ent)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> de &lt;span style="color:#f92672">=&lt;/span> DirEntry::new_entry(ent, self.ig.clone());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>de.is_dir().unwrap_or(&lt;span style="color:#66d9ef">false&lt;/span>) { &lt;span style="color:#75715e">// 可能是符号链接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Ok(de));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(err) &lt;span style="color:#f92672">=&lt;/span> de.into_error() { &lt;span style="color:#75715e">// 检查错误
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Err(err));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 应用忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.ig.add_child(&lt;span style="color:#f92672">&amp;amp;&lt;/span>de.path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(Some((child_ig, err_opt))) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> self.ig &lt;span style="color:#f92672">=&lt;/span> child_ig; &lt;span style="color:#75715e">// 更新为子目录的忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(err) &lt;span style="color:#f92672">=&lt;/span> err_opt {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Err(err));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(None) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {} &lt;span style="color:#75715e">// 无变化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Err(err)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(WalkEvent::File(ent)) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> de &lt;span style="color:#f92672">=&lt;/span> DirEntry::new_entry(ent, self.ig.clone());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> self.skip_entry(&lt;span style="color:#f92672">&amp;amp;&lt;/span>de).unwrap_or(&lt;span style="color:#66d9ef">false&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">continue&lt;/span>; &lt;span style="color:#75715e">// 跳过该文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(Ok(de)); &lt;span style="color:#75715e">// 返回文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="walkeventiter的事件生成">WalkEventIter的事件生成
&lt;/h4>&lt;h5 id="1-核心结构">1. 核心结构
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">WalkEventIter&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> depth: &lt;span style="color:#66d9ef">usize&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> it: &lt;span style="color:#a6e22e">walkdir&lt;/span>::IntoIter,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> next: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>walkdir::DirEntry, walkdir::Error&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-初始阶段">2. 初始阶段
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>WalkEventIter {depth: &lt;span style="color:#ae81ff">0&lt;/span>, it: &lt;span style="color:#a6e22e">it&lt;/span>.IntoIter, next: None }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="3-事件生成">3. 事件生成
&lt;/h5>&lt;p>从&lt;code>it&lt;/code>获取&lt;code>DirEntry&lt;/code>，&lt;code>depth&lt;/code>表示当前文件遍历深度。&lt;/p>
&lt;ol>
&lt;li>Exit事件生成：当检测到深度减少时（dent_depth &amp;lt; self.depth），表示正在从子目录返回&lt;/li>
&lt;li>&lt;strong>next字段&lt;/strong>：仅在生成Exit事件时&lt;strong>保存当前条目&lt;/strong>，确保下次处理时能正确处理，
&lt;ul>
&lt;li>因为退出目录时，我们生成了Exit事件，&lt;strong>当前条目被延迟处理了&lt;/strong>，所以要临时保存&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>depth管理：
&lt;ul>
&lt;li>进入子目录时 &lt;code>self.depth += 1&lt;/code>&lt;/li>
&lt;li>退出子目录时 &lt;code>self.depth -= 1&lt;/code>&lt;/li>
&lt;li>遇到新条目时更新 &lt;code>self.depth = dent.depth()&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="walkparallel">WalkParallel
&lt;/h3>&lt;h5 id="1核心构成">1.核心构成
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">WalkParallel&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paths: &lt;span style="color:#a6e22e">std&lt;/span>::vec::IntoIter&lt;span style="color:#f92672">&amp;lt;&lt;/span>PathBuf&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 要遍历的路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ig_root: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">// 根目录的忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> max_filesize: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">u64&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 文件大小限制
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> max_depth: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">usize&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 最大深度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> follow_links: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 是否跟踪符号链接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> same_file_system: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 是否限制在同一个文件系统
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> threads: &lt;span style="color:#66d9ef">usize&lt;/span>, &lt;span style="color:#75715e">// 线程数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> skip: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Arc&lt;span style="color:#f92672">&amp;lt;&lt;/span>Handle&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 跳过规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> filter: Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Filter&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 自定义过滤器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Worker&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">&amp;#39;s&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> visitor: Box&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#66d9ef">dyn&lt;/span> ParallelVisitor&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 处理文件/目录的回调
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> stack: &lt;span style="color:#a6e22e">Stack&lt;/span>, &lt;span style="color:#75715e">// 任务栈
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> quit_now: &lt;span style="color:#a6e22e">Arc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>AtomicBool&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 提前终止标志
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> active_workers: &lt;span style="color:#a6e22e">Arc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>AtomicUsize&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 活跃工作线程计数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// ... 其他状态
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-构建初始化">2. 构建初始化
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 1. 创建并行遍历器
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> walker &lt;span style="color:#f92672">=&lt;/span> WalkBuilder::new(&lt;span style="color:#e6db74">&amp;#34;/path&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .threads(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#75715e">// 设置线程数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .build_parallel();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 2. 运行遍历
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>walker.run(&lt;span style="color:#f92672">||&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每个线程的初始化代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Box::new(&lt;span style="color:#f92672">|&lt;/span>result&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理每个文件/目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> result {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(entry) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Found: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, entry.path().display()),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">eprintln!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error: &lt;/span>&lt;span style="color:#e6db74">{}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, err),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WalkState::Continue &lt;span style="color:#75715e">// 控制遍历流程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="3-关键组件">3. 关键组件
&lt;/h5>&lt;ul>
&lt;li>&lt;strong>ParallelVisitor&lt;/strong>：定义如何处理遍历结果&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">trait&lt;/span> ParallelVisitor: Send {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">visit&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, entry: Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>DirEntry, Error&lt;span style="color:#f92672">&amp;gt;&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">WalkState&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>Work&lt;/strong>任务单元：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Work&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dent: &lt;span style="color:#a6e22e">DirEntry&lt;/span>, &lt;span style="color:#75715e">//目录项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> ignore: &lt;span style="color:#a6e22e">Ignore&lt;/span>, &lt;span style="color:#75715e">//忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> root_device: &lt;span style="color:#66d9ef">u64&lt;/span>, &lt;span style="color:#75715e">//设备号（用于跨文件系统检查）
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="4-执行流程">4. 执行流程
&lt;/h5>&lt;ol>
&lt;li>创建工作线程池&lt;/li>
&lt;li>将初始路径加入工作队列&lt;/li>
&lt;li>每个工作线程：
&lt;ul>
&lt;li>从队列获取任务&lt;/li>
&lt;li>处理目录项&lt;/li>
&lt;li>发现子目录生成新任务&lt;/li>
&lt;li>处理ignore规则&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h4 id="流程详解">流程详解
&lt;/h4>&lt;h5 id="1-初始化阶段">1. 初始化阶段
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> walker &lt;span style="color:#f92672">=&lt;/span> WalkBuilder::new(&lt;span style="color:#e6db74">&amp;#34;/path&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .threads(&lt;span style="color:#ae81ff">4&lt;/span>) &lt;span style="color:#75715e">// 4个工作线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .build_parallel();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>walker.run(&lt;span style="color:#f92672">||&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 每个线程初始化时执行
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Box::new(&lt;span style="color:#f92672">|&lt;/span>result&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理每个文件/目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">println!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">{:?}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, result&lt;span style="color:#f92672">?&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WalkState::Continue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-核心方法">2. 核心方法
&lt;/h5>&lt;h6 id="21-visit方法">2.1 &lt;code>visit&lt;/code>方法
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span> &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">visit&lt;/span>(&lt;span style="color:#66d9ef">mut&lt;/span> self, builder: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> &lt;span style="color:#66d9ef">dyn&lt;/span> ParallelVisitorBuilder&lt;span style="color:#f92672">&amp;lt;&lt;/span>&amp;#39;_&lt;span style="color:#f92672">&amp;gt;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 初始化工作队列
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> threads &lt;span style="color:#f92672">=&lt;/span> self.threads();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> stack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">vec!&lt;/span>[];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 处理初始路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> visitor &lt;span style="color:#f92672">=&lt;/span> builder.build();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ... 处理初始路径并填充 stack ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 创建工作线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> quit_now &lt;span style="color:#f92672">=&lt;/span> Arc::new(AtomicBool::new(&lt;span style="color:#66d9ef">false&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> active_workers &lt;span style="color:#f92672">=&lt;/span> Arc::new(AtomicUsize::new(threads));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> stacks &lt;span style="color:#f92672">=&lt;/span> Stack::new_for_each_thread(threads, stack);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 4. 启动工作线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> std::thread::scope(&lt;span style="color:#f92672">|&lt;/span>s&lt;span style="color:#f92672">|&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> handles: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>_&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> stacks
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .into_iter()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#f92672">|&lt;/span>stack&lt;span style="color:#f92672">|&lt;/span> Worker { &lt;span style="color:#75715e">/* ... */&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .map(&lt;span style="color:#f92672">|&lt;/span>worker&lt;span style="color:#f92672">|&lt;/span> s.spawn(&lt;span style="color:#f92672">||&lt;/span> worker.run()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .collect();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 5. 等待所有工作线程完成
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> handle &lt;span style="color:#66d9ef">in&lt;/span> handles {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> handle.join().unwrap();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="22-workerrun方法">2.2 &lt;code>Worker::run&lt;/code>方法
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>(&lt;span style="color:#66d9ef">mut&lt;/span> self) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(work) &lt;span style="color:#f92672">=&lt;/span> self.get_work() { &lt;span style="color:#75715e">//获取工作项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> WalkState::Quit &lt;span style="color:#f92672">=&lt;/span> self.run_one(work) { &lt;span style="color:#75715e">//处理工作项
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.quit_now()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="23-workerrun_one方法">2.3 &lt;code>Worker::run_one&lt;/code>方法
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">run_one&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self, work: &lt;span style="color:#a6e22e">Work&lt;/span>) -&amp;gt; &lt;span style="color:#a6e22e">WalkState&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 如果是文件或符号链接，直接处理
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> work.is_symlink() &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>work.is_dir() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> self.visitor.visit(Ok(work.dent));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 读取目录内容
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> readdir &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> work.read_dir() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(readdir) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> readdir,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> self.visitor.visit(Err(err)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 处理目录中的每个条目
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> result &lt;span style="color:#66d9ef">in&lt;/span> readdir {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> self.generate_work(&lt;span style="color:#75715e">/* ... */&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> state.is_quit() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> state;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> WalkState::Continue
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h6 id="24-workerget_work方法">2.4 &lt;code>Worker::get_work&lt;/code>方法
&lt;/h6>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">get_work&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> self) -&amp;gt; Option&lt;span style="color:#f92672">&amp;lt;&lt;/span>Work&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 1. 先尝试从自己的队列获取工作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(work) &lt;span style="color:#f92672">=&lt;/span> self.stack.pop() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(work);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 2. 尝试从其他线程窃取工作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(work) &lt;span style="color:#f92672">=&lt;/span> self.stack.steal() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Some(work);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 3. 如果都失败，等待工作或退出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.stack.recv()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="3-工作流程">3. 工作流程
&lt;/h5>&lt;h6 id="1-初始化阶段-1">1. 初始化阶段
&lt;/h6>&lt;ul>
&lt;li>创建指定数量的工作线程&lt;/li>
&lt;li>将初始工作项分配到工作队列&lt;/li>
&lt;/ul>
&lt;h6 id="2-工作阶段">2. 工作阶段
&lt;/h6>&lt;ul>
&lt;li>每个工作线程从自己的队列获取工作&lt;/li>
&lt;li>处理文件或遍历目录&lt;/li>
&lt;li>将新发现的工作放入队列&lt;/li>
&lt;/ul>
&lt;h6 id="3-工作窃取">3. 工作窃取
&lt;/h6>&lt;ul>
&lt;li>当线程自己的队列为空时，尝试从其他线程窃取工作&lt;/li>
&lt;li>使用原子操作保证线程安全&lt;/li>
&lt;/ul>
&lt;h6 id="4-终止条件">4. 终止条件
&lt;/h6>&lt;ul>
&lt;li>所有工作队列为空时&lt;/li>
&lt;li>所有工作线程都处于空闲状态&lt;/li>
&lt;li>收到退出信号&lt;/li>
&lt;/ul>
&lt;h5 id="4-关键设计点">4. 关键设计点
&lt;/h5>&lt;ol>
&lt;li>工作窃取：使用工作窃取算法实现负载均衡&lt;/li>
&lt;li>无锁设计：使用&lt;code>channel&lt;/code>进行线程间通信&lt;/li>
&lt;li>优雅退出：使用原子布尔值控制工作线程退出&lt;/li>
&lt;li>资源管理：使用&lt;code>RAII&lt;/code>确保资源正确释放&lt;/li>
&lt;/ol>
&lt;h4 id="总结">总结
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>文件发现获得文件的绝对路径，之后使用绝对路径便可读取文件内容&lt;/p>
&lt;/li>
&lt;li>
&lt;p>多线程模式使用广度优先遍历，单线程使用了深度优先遍历&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Worker是任务调度，Work是任务定义，Visitor是任务处理&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="ignore的结构">Ignore的结构
&lt;/h3>&lt;p>结构体&lt;code>Ignore&lt;/code>负责管理忽略规则。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">/// Ignore is a matcher useful for recursively walking one or more directories.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span>&lt;span style="color:#75715e">#[derive(Clone, Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Ignore&lt;/span>(Arc&lt;span style="color:#f92672">&amp;lt;&lt;/span>IgnoreInner&lt;span style="color:#f92672">&amp;gt;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#[derive(Clone, Debug)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">IgnoreInner&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// A map of all existing directories that have already been
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">/// compiled into matchers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">///
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">/// Note that this is never used during matching, only when adding new
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">/// parent directory matchers. This avoids needing to rebuild glob sets for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">/// parent directories if many paths are being searched.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> compiled: &lt;span style="color:#a6e22e">Arc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>RwLock&lt;span style="color:#f92672">&amp;lt;&lt;/span>HashMap&lt;span style="color:#f92672">&amp;lt;&lt;/span>OsString, Weak&lt;span style="color:#f92672">&amp;lt;&lt;/span>IgnoreInner&lt;span style="color:#f92672">&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// The path to the directory that this matcher was built from.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> dir: &lt;span style="color:#a6e22e">PathBuf&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// An override matcher (default is empty).
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> overrides: &lt;span style="color:#a6e22e">Arc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Override&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// A file type matcher.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> types: &lt;span style="color:#a6e22e">Arc&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>Types&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// The parent directory to match next.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> parent: &lt;span style="color:#a6e22e">Ignore&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether this matcher should be compiled case insensitively.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> case_insensitive: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to match hidden files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> hidden: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to read .ignore files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> ignore: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to respect any ignore files in parent directories.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> parents: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to read git&amp;#39;s global gitignore file.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> git_global: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to read .gitignore files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> git_ignore: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to read .git/info/exclude files.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> git_exclude: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether to ignore files case insensitively
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> ignore_case_insensitive: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">/// Whether a git repository must be present in order to apply any
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> &lt;span style="color:#e6db74">/// git-related ignore rules.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&lt;/span> require_git: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="关键组件解析">关键组件解析
&lt;/h5>&lt;ol>
&lt;li>Ignore结构体
&lt;ul>
&lt;li>使用&lt;code>Arc&lt;/code>进行引用计数，允许多线程共享&lt;/li>
&lt;li>实际实现在&lt;code>IgnoreInner&lt;/code>中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>IgnoreInner&lt;/code>字段
&lt;ul>
&lt;li>&lt;code>compiled&lt;/code>：缓存已编译的目录匹配器，避免重复构建&lt;/li>
&lt;li>&lt;code>dir&lt;/code>:当前匹配器对应的目录路径&lt;/li>
&lt;li>&lt;code>overrides&lt;/code>：覆盖规则，优先级最高&lt;/li>
&lt;li>&lt;code>types&lt;/code>：文件类型匹配器&lt;/li>
&lt;li>&lt;code>parent&lt;/code>: 父目录的匹配器，形成链式结构&lt;/li>
&lt;li>各种标志位：控制忽略规则的行为(如是否忽略隐藏文件、是否读取.gitignore等)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>忽略规则的优先级
&lt;ul>
&lt;li>从高到低
&lt;ol>
&lt;li>显式覆盖规则(&lt;code>overrides&lt;/code>)&lt;/li>
&lt;li>当前目录的.gitignore&lt;/li>
&lt;li>父目录的.gitignore&lt;/li>
&lt;li>全局gitignore&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>Haystack</title><link>https://www.dust-zed.site/rust/ripgrep/haystack/</link><pubDate>Tue, 26 Aug 2025 09:21:41 +0800</pubDate><guid>https://www.dust-zed.site/rust/ripgrep/haystack/</guid><description>&lt;p>&lt;code>haystack.rs&lt;/code>是连接文件发现和搜索执行的核心抽象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//在main.rs中
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> haystack_builder &lt;span style="color:#f92672">=&lt;/span> args.haystack_builder();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> haystack &lt;span style="color:#f92672">=&lt;/span> haystack_builder.build_from_result(result);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>searcher.search(&lt;span style="color:#f92672">&amp;amp;&lt;/span>haystack);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Haystack&lt;/code>是对&lt;code>ignore::DirEntry&lt;/code>的包装，添加了应用层逻辑,对&lt;code>DirEntry&lt;/code>增加了几种判断，而&lt;code>HaystackBuilder&lt;/code>则是根据&lt;code>DirEntry&lt;/code>的类型返回不同的结果。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Haystack&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dent: &lt;span style="color:#a6e22e">ignore&lt;/span>::DirEntry,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> strip_dot_prefix: &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">impl&lt;/span> Haystack {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_stdin&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_dir&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_explicit&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_file&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Haystack&lt;/code>中的方法指明了文件类型的层次关系：&lt;/p>
&lt;ul>
&lt;li>普通文件(&lt;code>is_file() == true&lt;/code>)&lt;/li>
&lt;li>目录(&lt;code>is_dir() == true&lt;/code>)&lt;/li>
&lt;li>符号链接 (既不是文件也不是目录)&lt;/li>
&lt;li>特殊文件(设备、管道、socket)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>HaystackBuilder&lt;/code>根据几个&lt;code>is_*&lt;/code>方法返回&lt;code>Option&amp;lt;Haystack&amp;gt;&lt;/code>。&lt;/p>
&lt;h4 id="haystack对direntry包装">Haystack对DirEntry包装
&lt;/h4>&lt;p>&lt;code>Haystack&lt;/code>包装了&lt;code>DirEntry&lt;/code>,而不是在&lt;code>DirEntry&lt;/code>中扩展，体现了几个重要的设计原则：&lt;/p>
&lt;h5 id="1-关注点分离">1. 关注点分离
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ignore::DirEntry - 通用文件系统抽象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 职责：文件遍历、基础元数据、忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Haystack - ripgrep 特定的搜索抽象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 职责：搜索逻辑、用户意图理解、应用层策略
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="2-不同的语义层次">2. 不同的语义层次
&lt;/h5>&lt;p>&lt;code>DirEntry&lt;/code>的视角：文件系统条目&lt;/p>
&lt;ul>
&lt;li>&lt;code>is_file()&lt;/code>→&amp;ldquo;这是一个文件系统吗？&amp;rdquo;&lt;/li>
&lt;li>&lt;code>is_dir()&lt;/code>→&amp;ldquo;这是一个文件系统目录吗？&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Haystack&lt;/code>的视角：搜索目标&lt;/p>
&lt;ul>
&lt;li>&lt;code>is_explicit()&lt;/code> →&amp;ldquo;用户明确要求搜索这个吗？&amp;rdquo;&lt;/li>
&lt;li>&lt;code>is_dir()&lt;/code>→ &amp;ldquo;从搜索角度看，这应该被当作目录处理吗？&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h5 id="3-符号链接处理的差异">3. 符号链接处理的差异
&lt;/h5>&lt;p>注意&lt;code>Haystack::is_dir()&lt;/code>的特殊逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">is_dir&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ft &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.dent.file_type() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Some(ft) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> ft,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ft.is_dir() { &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 关键差异：额外的符号链接解析
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> self.dent.path_is_symlink() &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> self.dent.path().is_dir()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个逻辑是ripgrep特有的，不应该污染通用的&lt;code>DirEntry&lt;/code>&lt;/p>
&lt;h5 id="4-应用特定的概念">4. 应用特定的概念
&lt;/h5>&lt;p>&lt;code>Haystack&lt;/code>引入了ripgrep特有的概念：&lt;/p>
&lt;ul>
&lt;li>&lt;code>is_explicit()&lt;/code> - 基于&lt;code>depth == 0&lt;/code>判断用户意图&lt;/li>
&lt;li>&lt;code>strip_dot_prefix&lt;/code> - UI优化功能&lt;/li>
&lt;li>搜索优先级策略 - 显式 &amp;gt; 文件 &amp;gt; 其他&lt;/li>
&lt;/ul>
&lt;h5 id="5-依赖方向控制">5. 依赖方向控制
&lt;/h5>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>ignore &lt;span style="color:#66d9ef">crate&lt;/span> (&lt;span style="color:#960050;background-color:#1e0010">通用&lt;/span>) &lt;span style="color:#960050;background-color:#1e0010">←&lt;/span> ripgrep core (&lt;span style="color:#960050;background-color:#1e0010">特定&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果把 ripgrep 逻辑放入 DirEntry，会让通用库依赖特定应用，违反了依赖倒置原则。&lt;/p>
&lt;h5 id="6-架构优势">6. 架构优势
&lt;/h5>&lt;ol>
&lt;li>可测试性 - &lt;code>Haystack&lt;/code>的逻辑可以独立测试&lt;/li>
&lt;li>可扩展性 - 可以添加更多ripgrep特定的方法&lt;/li>
&lt;li>复用性 - &lt;code>ignore&lt;/code>crate 可以被其他工具使用&lt;/li>
&lt;li>清晰性 - 每个类型的职责边界明确&lt;/li>
&lt;/ol>
&lt;p>这是&lt;strong>适配器模式&lt;/strong>的经典应用，体现了优秀的软件架构设计。&lt;/p>
&lt;h5 id="7-抽象层次的视角">7. 抽象层次的视角
&lt;/h5>&lt;p>从&lt;code>Haystack&lt;/code>的设计可以学到优秀架构设计的核心思想：&lt;strong>抽象层次的视角分离&lt;/strong>&lt;/p>
&lt;p>&lt;code>DirEntry&lt;/code>是文件系统的抽象，就应该从文件系统视角去添加一些方法；&lt;code>Haystack&lt;/code>是搜索目标的抽象，就应该从搜索角度去添加方法。&lt;/p></description></item><item><title>HiArgs和lowArgs</title><link>https://www.dust-zed.site/rust/ripgrep/hiargs%E5%92%8Clowargs/</link><pubDate>Sun, 24 Aug 2025 20:57:16 +0800</pubDate><guid>https://www.dust-zed.site/rust/ripgrep/hiargs%E5%92%8Clowargs/</guid><description>&lt;h3 id="核心设计模式">核心设计模式
&lt;/h3>&lt;h4 id="1-两层参数结构">1. 两层参数结构
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>LowArgs (&lt;span style="color:#960050;background-color:#1e0010">原始参数&lt;/span>) &lt;span style="color:#960050;background-color:#1e0010">→&lt;/span> HiArgs (&lt;span style="color:#960050;background-color:#1e0010">处理后的配置&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>设计理念&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>LowArgs&lt;/strong>：接近CLI原始输入，最小验证&lt;/li>
&lt;li>&lt;strong>HiArgs&lt;/strong>：业务就绪的配置，包含复杂对象和计算结果&lt;/li>
&lt;li>&lt;strong>最小验证&lt;/strong>：最小验证的核心是&lt;strong>将不受信任数据快速转变为可信数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h4 id="2-字段组织策略">2. 字段组织策略
&lt;/h4>&lt;p>&lt;strong>简单配置字段&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>byte_offset: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>column: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>heading: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>quiet: &lt;span style="color:#66d9ef">bool&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ... 直接从LowArgs 复制或简单计算
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>复杂构建对象&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>globs: &lt;span style="color:#a6e22e">ignore&lt;/span>::overrides::Override,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>pre_globs: &lt;span style="color:#a6e22e">ignore&lt;/span>::overrides::Overrode,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>types: &lt;span style="color:#a6e22e">ignore&lt;/span>::types::Types,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>patterns: &lt;span style="color:#a6e22e">Patterns&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>paths: &lt;span style="color:#a6e22e">Paths&lt;/span>,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>环境感知字段&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>is_terminal_stdout: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 检测输出终端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>mmap_choice: &lt;span style="color:#a6e22e">grep&lt;/span>::searcher::MmapChoice, &lt;span style="color:#75715e">// 内存映射策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>hyperlink_config: &lt;span style="color:#a6e22e">grep&lt;/span>::printer::HyperLinkConfig, &lt;span style="color:#75715e">// 超链接配置
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关键设计原则">关键设计原则
&lt;/h3>&lt;h4 id="1-延迟构建模式">1. 延迟构建模式
&lt;/h4>&lt;p>复杂对象在 &lt;code>from_low_args&lt;/code> 中统一构建：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> globs &lt;span style="color:#f92672">=&lt;/span> globs(&lt;span style="color:#f92672">&amp;amp;&lt;/span>state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>low)&lt;span style="color:#f92672">?&lt;/span>; &lt;span style="color:#75715e">// 需要所有 glob 模式
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> types &lt;span style="color:#f92672">=&lt;/span> types(&lt;span style="color:#f92672">&amp;amp;&lt;/span>low)&lt;span style="color:#f92672">?&lt;/span>; &lt;span style="color:#75715e">// 需要所有类型规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> patterns &lt;span style="color:#f92672">=&lt;/span> Patterns::from_low_args(&lt;span style="color:#f92672">..&lt;/span>.)&lt;span style="color:#f92672">?&lt;/span>; &lt;span style="color:#75715e">// 需要所有模式
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-状态依赖管理">2. 状态依赖管理
&lt;/h4>&lt;p>通过 &lt;code>State&lt;/code> 结构体管理环境状态&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> state &lt;span style="color:#f92672">=&lt;/span> State::new()&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// state 包含：终端检测、stdin_cosumed、工作目录等
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-配置计算模式">3. 配置计算模式
&lt;/h4>&lt;p>根据环境和标志动态计算最终配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> color &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> low.color {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ColorChoice::Auto &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>state.is_terminal_stdout &lt;span style="color:#f92672">=&amp;gt;&lt;/span> ColorChoice::Never,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">=&amp;gt;&lt;/span> low.color,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> heading &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> low.heading {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> None &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>low.vimgrep &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> state.is_terminal_stdout, &lt;span style="color:#75715e">// 智能默认值
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Some(value) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> value &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>low.vimgrep, &lt;span style="color:#75715e">// 考虑标志冲突
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过 &lt;code>HiArgs&lt;/code> 和 &lt;code>LowArgs&lt;/code> 这种分层设计，将“解析”和“配置”职责分离，使得代码更加模块化，每层都有明确的职责边界。&lt;/p>
&lt;h3 id="核心构建方法">核心构建方法
&lt;/h3>&lt;h4 id="matcher-方法的设计模式">matcher() 方法的设计模式
&lt;/h4>&lt;p>&lt;strong>策略模式&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">pub&lt;/span>(&lt;span style="color:#66d9ef">crate&lt;/span>) &lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">matcher&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>PatternMatcher&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">match&lt;/span> self.engine {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EngineChoice::Default &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.matcher_rust() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(m) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(m),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> anyhow::&lt;span style="color:#a6e22e">bail!&lt;/span>(suggest_other_engine(err.to_string())),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EngineChoice::&lt;span style="color:#66d9ef">PCRE2&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> Ok(self.matcher_pcre2()&lt;span style="color:#f92672">?&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> EngineChoice::Auto &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 尝试 Rust 引擎，失败则尝试 PCRE2
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> rust_err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.matcher_rust() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(m) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(m),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> err,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> pcre_err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.matcher_pcre2() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(m) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(m),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> err,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 两个都失败，提供详细错误信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> anyhow::&lt;span style="color:#a6e22e">bail!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;regex could not be compiled with either engine...&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>设计思路&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>根据用户选择的引擎类型，动态选择不同的匹配器实现&lt;/li>
&lt;li>&lt;code>Auto&lt;/code> 模式体现了优雅的降级策略：先尝试默认引擎，失败则尝试 PCRE2&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>建造者模式&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">matcher_rust&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>PatternMatcher&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> builder &lt;span style="color:#f92672">=&lt;/span> grep::regex::RegexMatcherBuilder::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .multi_line(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .unicode(&lt;span style="color:#f92672">!&lt;/span>self.no_unicode)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .octal(&lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .fixed_strings(self.fixed_strings);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 根据配置逐步构建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> self.case {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CaseMode::Sensitive &lt;span style="color:#f92672">=&amp;gt;&lt;/span> builder.case_insensitive(&lt;span style="color:#66d9ef">false&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CaseMode::Insensitive &lt;span style="color:#f92672">=&amp;gt;&lt;/span> builder.case_insensitive(&lt;span style="color:#66d9ef">true&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CaseMode::Smart &lt;span style="color:#f92672">=&amp;gt;&lt;/span> builder.case_smart(&lt;span style="color:#66d9ef">true&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 最终构建
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> m &lt;span style="color:#f92672">=&lt;/span> builder.build_many(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self.patterns.patterns)&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(PatternMatcher::RustRegex(m))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>设计思路&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用建造者模式逐步配置复杂对象&lt;/li>
&lt;li>链式调用提供流畅的 API&lt;/li>
&lt;li>最后调用 &lt;code>build_many()&lt;/code> 完成构建&lt;/li>
&lt;/ul>
&lt;h4 id="条件编译和特性门控">条件编译和特性门控
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">matcher_pcre2&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self) -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>PatternMatcher&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[cfg(feature = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;pcre2&amp;#34;&lt;/span>&lt;span style="color:#75715e">)]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// PCRE2 实现
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> builder &lt;span style="color:#f92672">=&lt;/span> grep::pcre2::RegexMatcherBuilder::new();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ... 配置代码
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(PatternMatcher::&lt;span style="color:#66d9ef">PCRE2&lt;/span>(m))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">#[cfg(not(feature = &lt;/span>&lt;span style="color:#e6db74">&amp;#34;pcre2&amp;#34;&lt;/span>&lt;span style="color:#75715e">))]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(anyhow::&lt;span style="color:#a6e22e">anyhow!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;PCRE2 is not available in this build&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>设计思路&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用 Rust 的条件编译特性&lt;/p>
&lt;/li>
&lt;li>
&lt;p>特性定义（&lt;code>Cargo.toml&lt;/code>）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-toml" data-lang="toml">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#a6e22e">features&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">pcre2&lt;/span> = [&lt;span style="color:#e6db74">&amp;#34;grep/pcre2&amp;#34;&lt;/span>] &lt;span style="color:#960050;background-color:#1e0010">//&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">定义&lt;/span> &lt;span style="color:#a6e22e">pcre2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">特性，依赖于&lt;/span> &lt;span style="color:#a6e22e">grep&lt;/span> &lt;span style="color:#a6e22e">crate&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">的&lt;/span> &lt;span style="color:#a6e22e">pcre2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">特性&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>在编译时决定是否包含 PCRE2 支持&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="其他方法">其他方法
&lt;/h3>&lt;p>&lt;code>searcher()&lt;/code>、&lt;code>printer()&lt;/code> 等其他构造方法基本采用建造者模式。&lt;code>search_worker()&lt;/code> 方法单独说明：&lt;/p>
&lt;h4 id="组件组合模式">组件组合模式
&lt;/h4>&lt;p>&lt;code>search_worker&lt;/code> 体现经典的 &lt;strong>组合模式&lt;/strong>：&lt;/p>
&lt;pre tabindex="0">&lt;code>SearchWorker
├── PatternMatcher (模式匹配)
├── Searcher (文件搜索)
└── Printer (结果输出)
&lt;/code>&lt;/pre>&lt;p>每个组件职责：&lt;/p>
&lt;ol>
&lt;li>&lt;code>PatternMatcher&lt;/code>：判断文本是否匹配模式&lt;/li>
&lt;li>&lt;code>Searcher&lt;/code>：读取文件内容，按行处理&lt;/li>
&lt;li>&lt;code>Printer&lt;/code>：格式化并输出匹配结果&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>设计优势&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>职责分离：每个组件专注于自己的功能&lt;/li>
&lt;li>可测试性：可以独立测试每个组件&lt;/li>
&lt;li>可扩展性：可以替换任何组件的实现&lt;/li>
&lt;/ul>
&lt;h4 id="walk_builder">walk_builder()
&lt;/h4>&lt;h5 id="职责分层">职责分层
&lt;/h5>&lt;p>包含四个核心职责：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>路径管理&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> builder &lt;span style="color:#f92672">=&lt;/span> ignore::WalkBuilder::new(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self.paths.paths[&lt;span style="color:#ae81ff">0&lt;/span>]);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> path &lt;span style="color:#66d9ef">in&lt;/span> self.paths.paths.iter().skip(&lt;span style="color:#ae81ff">1&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder.add(path)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>初始化：使用第一个路径作为根路径&lt;/li>
&lt;li>扩展：添加所有额外的搜索路径&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>忽略文件系统配置&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 用户自定义忽略文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.no_ignore_files {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> path &lt;span style="color:#66d9ef">in&lt;/span> self.ignore_file.iter() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(err) &lt;span style="color:#f92672">=&lt;/span> builder.add_ignore(path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ignore_message!&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;{err}&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Git 集成忽略规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>.git_global(&lt;span style="color:#f92672">!&lt;/span>self.no_ignore_vcs &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.no_ignore_global)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.git_ignore(&lt;span style="color:#f92672">!&lt;/span>self.no_ignore_vcs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.git_exclude(&lt;span style="color:#f92672">!&lt;/span>self.no_ignore_vcs &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.no_ignore_exclude)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 通用忽略文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>.ignore(&lt;span style="color:#f92672">!&lt;/span>self.no_ignore_dot)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.parents(&lt;span style="color:#f92672">!&lt;/span>self.no_ignore_parent)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ripgrep 专用忽略文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>self.no_ignore_dot {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder.add_custom_ignore_filename(&lt;span style="color:#e6db74">&amp;#34;.rgignore&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>&lt;strong>遍历行为配置&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>builder
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .max_depth(self.max_depth) &lt;span style="color:#75715e">// 最大递归深度
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .follow_links(self.follow) &lt;span style="color:#75715e">// 是否跟随符号链接
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .max_filesize(self.max_filesize) &lt;span style="color:#75715e">// 最大文件大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .threads(self.threads) &lt;span style="color:#75715e">// 线程数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .same_file_system(self.one_file_system) &lt;span style="color:#75715e">// 是否限制在同一文件系统
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .skip_stdout(&lt;span style="color:#a6e22e">matches!&lt;/span>(self.mode, Mode::Search(_))) &lt;span style="color:#75715e">// 跳过标准输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .hidden(&lt;span style="color:#f92672">!&lt;/span>self.hidden) &lt;span style="color:#75715e">// 是否包含隐藏文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .require_git(&lt;span style="color:#f92672">!&lt;/span>self.no_require_git) &lt;span style="color:#75715e">// 是否要求 Git 仓库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> .ignore_case_insensitive(self.ignore_file_case_insensitive); &lt;span style="color:#75715e">// 忽略文件大小写
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>&lt;strong>高级功能配置&lt;/strong>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 文件类型过滤
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>.overrides(self.globs.clone())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.types(self.types.clone())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 排序优化
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(&lt;span style="color:#66d9ef">ref&lt;/span> sort) &lt;span style="color:#f92672">=&lt;/span> self.sort {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">assert_eq!&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, self.threads, &lt;span style="color:#e6db74">&amp;#34;sorting implies single threaded&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>sort.reverse &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">matches!&lt;/span>(sort.kind, SortModeKind::Path) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> builder.sort_by_file_name(&lt;span style="color:#f92672">|&lt;/span>a, b&lt;span style="color:#f92672">|&lt;/span> a.cmp(b));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>walk_builder&lt;/code> 是系统集成点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>底层&lt;/strong>：文件系统遍历（&lt;code>ignore::WalkBuilder&lt;/code>）&lt;/li>
&lt;li>&lt;strong>中层&lt;/strong>：忽略规则处理（Git、自定义、类型过滤）&lt;/li>
&lt;li>&lt;strong>上层&lt;/strong>：用户配置映射（命令行参数到行为）&lt;/li>
&lt;/ul>
&lt;h4 id="current_dir">current_dir()
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">current_dir&lt;/span>() -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>PathBuf&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> err &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">match&lt;/span> std::env::current_dir() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Err(err) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> err, &lt;span style="color:#75715e">// 保存错误，继续尝试回退方案
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Ok(cwd) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(cwd), &lt;span style="color:#75715e">// 成功则直接返回
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> Some(cwd) &lt;span style="color:#f92672">=&lt;/span> std::env::var_os(&lt;span style="color:#e6db74">&amp;#34;PWD&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">!&lt;/span>cwd.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(PathBuf::from(cwd));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> anyhow::&lt;span style="color:#a6e22e">bail!&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;failed to get current working directory: {err}&lt;/span>&lt;span style="color:#ae81ff">\n\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> did your CWD get deleted?&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此方法获取当前工作目录时的异常处理：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>目录被删除&lt;/strong> - 进程所在目录可能被其他进程删除&lt;/li>
&lt;li>&lt;strong>权限问题&lt;/strong> - 无读取当前目录权限&lt;/li>
&lt;li>&lt;strong>符号链接问题&lt;/strong> - 当前目录是损坏的符号链接&lt;/li>
&lt;/ul>
&lt;p>为何需要复杂处理？&lt;/p>
&lt;ol>
&lt;li>需要 cwd 将相对路径转绝对路径（如 &lt;code>rg &amp;quot;pattern&amp;quot; ../other_projects/&lt;/code>）&lt;/li>
&lt;li>通过 &lt;code>PWD&lt;/code> 环境变量回退保证健壮性&lt;/li>
&lt;/ol>
&lt;p>&lt;code>hiargs.rs&lt;/code> 中其他方法均基于 &lt;code>LowArgs&lt;/code> 完善 &lt;code>HiArgs&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 核心数据结构
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> patterns &lt;span style="color:#f92672">=&lt;/span> Patterns::from_low_args(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> low)&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> paths &lt;span style="color:#f92672">=&lt;/span> Paths::from_low_args(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>patterns, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> low)&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> binary &lt;span style="color:#f92672">=&lt;/span> BinaryDetection::from_low_args(&lt;span style="color:#f92672">&amp;amp;&lt;/span>state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>low);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// 辅助功能配置
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> colors &lt;span style="color:#f92672">=&lt;/span> take_color_specs(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> low);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> hyperlink_config &lt;span style="color:#f92672">=&lt;/span> take_hyperlink_config(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#66d9ef">mut&lt;/span> low)&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> stats &lt;span style="color:#f92672">=&lt;/span> stats(&lt;span style="color:#f92672">&amp;amp;&lt;/span>low);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> types &lt;span style="color:#f92672">=&lt;/span> types(&lt;span style="color:#f92672">&amp;amp;&lt;/span>low)&lt;span style="color:#f92672">?&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> globs &lt;span style="color:#f92672">=&lt;/span> globs(&lt;span style="color:#f92672">&amp;amp;&lt;/span>state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>low)&lt;span style="color:#f92672">?&lt;/span>; &lt;span style="color:#75715e">// 文件匹配规则
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> pre_globs &lt;span style="color:#f92672">=&lt;/span> preprocessor_globs(&lt;span style="color:#f92672">&amp;amp;&lt;/span>state, &lt;span style="color:#f92672">&amp;amp;&lt;/span>low)&lt;span style="color:#f92672">?&lt;/span>; &lt;span style="color:#75715e">// 预处理器规则
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="核心结构体">核心结构体
&lt;/h3>&lt;h4 id="patterns">Patterns
&lt;/h4>&lt;p>表示要匹配的内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Patterns&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> patterns: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>模式来源的统一处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">from_low_args&lt;/span>(state: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> State, low: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> LowArgs)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>Patterns&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>三种模式来源：&lt;/p>
&lt;ol>
&lt;li>positional：&lt;code>rg &amp;quot;pattern&amp;quot; file.txt&lt;/code>&lt;/li>
&lt;li>&lt;code>-e/--regexp&lt;/code>: &lt;code>rg -e &amp;quot;pattern1&amp;quot; -e &amp;quot;pattern2&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>-f/--file&lt;/code>: &lt;code>rg -f patterns.txt&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>-e/--regexp&lt;/code> 对应 &lt;code>Pattern&lt;/code> flag 的 update 逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, v: &lt;span style="color:#a6e22e">FlagValue&lt;/span>, args: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> LowArgs) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> regexp &lt;span style="color:#f92672">=&lt;/span> convert::string(v.unwrap_value());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args.patterns.push(PatternSource::Regexp(regexp));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-f/--file&lt;/code> 对应 &lt;code>File&lt;/code> flag 的 update 逻辑：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>self, v: &lt;span style="color:#a6e22e">FlagValue&lt;/span>, args: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> LowArgs) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> path &lt;span style="color:#f92672">=&lt;/span> PathBuf::from(v.unwrap_value());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> args.patterns.push(PatternSource::File(path));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Ok(())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Patterns::from_low_args&lt;/code> 从三种来源构造去重(利用&lt;code>HashSet&lt;/code>)的 &lt;code>Patterns::patterns: Vec&amp;lt;String&amp;gt;&lt;/code> 。&lt;code>-f file.txt, --file=file.txt&lt;/code>中&lt;code>file.txt(pattern文件)&lt;/code>存放着需要匹配的&lt;code>patterns&lt;/code>。&lt;/p>
&lt;h4 id="paths---路径管理系统">Paths - 路径管理系统
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">Paths&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paths: Vec&lt;span style="color:#f92672">&amp;lt;&lt;/span>PathBuf&lt;span style="color:#f92672">&amp;gt;&lt;/span>, &lt;span style="color:#75715e">// 实际路径列表
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> has_implicit_path: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 是否有隐式路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> is_one_file: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// 是否只搜索单个文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要么从&lt;code>positional&lt;/code>中读取文件路径，要么就是智能路径推断。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fn&lt;/span> &lt;span style="color:#a6e22e">from_low_args&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> State,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">Patterns&lt;/span>, &lt;span style="color:#75715e">// 虽然不使用，但强制要求存在
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> low: &lt;span style="color:#66d9ef">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">mut&lt;/span> LowArgs,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) -&amp;gt; &lt;span style="color:#a6e22e">anyhow&lt;/span>::Result&lt;span style="color:#f92672">&amp;lt;&lt;/span>Paths&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#66d9ef">mut&lt;/span> paths &lt;span style="color:#f92672">=&lt;/span> Vec::with_capacity(low.positional.len());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> osarg &lt;span style="color:#66d9ef">in&lt;/span> low.positional.drain(&lt;span style="color:#f92672">..&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> path &lt;span style="color:#f92672">=&lt;/span> PathBuf::from(osarg);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> state.stdin_consumed &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> path &lt;span style="color:#f92672">==&lt;/span> Path::new(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> anyhow::&lt;span style="color:#a6e22e">bail!&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;error: attempted to read patterns from stdin &lt;/span>&lt;span style="color:#ae81ff">\&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> while also searching stdin&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> paths.push(path);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">..&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> use_cwd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!&lt;/span>is_readable_stdin
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">||&lt;/span> state.stdin_consumed
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">matches!&lt;/span>(low.mode, Mode::Search(_));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> (path, is_one_file) &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> use_cwd {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (PathBuf::from(&lt;span style="color:#e6db74">&amp;#34;./&amp;#34;&lt;/span>), &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#75715e">// 搜索当前目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (PathBuf::from(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>), &lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#75715e">// 搜索 stdin
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Paths::from_low_args()&lt;/code>函数使用了一个非常巧妙的&lt;strong>编译时依赖约束&lt;/strong>设计，这个设计确保了&lt;/p>
&lt;ul>
&lt;li>调用着必须先构造&lt;code>Patterns&lt;/code>&lt;/li>
&lt;li>编译器会检查这个约束&lt;/li>
&lt;li>无法意外地颠倒调用顺序&lt;/li>
&lt;/ul>
&lt;p>设计&lt;strong>编译时依赖约束&lt;/strong>的原因是&lt;code>Patterns&lt;/code>和&lt;code>Paths&lt;/code>都使用了&lt;code>positional&lt;/code>,此数据消费顺序不可颠倒。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Patterns::from_low_args 中：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> low.patterns.is_empty() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">let&lt;/span> ospat &lt;span style="color:#f92672">=&lt;/span> low.positional.remove(&lt;span style="color:#ae81ff">0&lt;/span>); &lt;span style="color:#75715e">// 消费第一个位置参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> Ok(Patterns { patterns: &lt;span style="color:#a6e22e">vec&lt;/span>&lt;span style="color:#f92672">!&lt;/span>[pat] });
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Paths::from_low_args 中：
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> osarg &lt;span style="color:#66d9ef">in&lt;/span> low.positional.drain(&lt;span style="color:#f92672">..&lt;/span>) { &lt;span style="color:#75715e">// 处理剩余的位置参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> paths.push(PathBuf::from(osarg));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>编译时依赖约束设计优势&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>编译时安全&lt;/strong> - 类型系统防止错误调用顺序&lt;/li>
&lt;li>&lt;strong>自文档化&lt;/strong> - 函数签名清楚表达依赖关系&lt;/li>
&lt;li>&lt;strong>零运行时成本&lt;/strong> - 约束在编译时检查，运行时无开销&lt;/li>
&lt;li>&lt;strong>API 清晰性&lt;/strong> - 强制调用者理解正确的使用方式&lt;/li>
&lt;/ol>
&lt;p>单文件优化检测：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> is_one_file &lt;span style="color:#f92672">=&lt;/span> paths.len() &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> (paths[&lt;span style="color:#ae81ff">0&lt;/span>] &lt;span style="color:#f92672">==&lt;/span> Path::new(&lt;span style="color:#e6db74">&amp;#34;-&amp;#34;&lt;/span>) &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#f92672">!&lt;/span>paths[&lt;span style="color:#ae81ff">0&lt;/span>].is_dir());
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用 &lt;code>!is_dir()&lt;/code> 而非 &lt;code>is_file()&lt;/code> 更准确&lt;/li>
&lt;li>stdin (&lt;code>-&lt;/code>) 被视为单文件&lt;/li>
&lt;li>单文件搜索启用特定优化&lt;/li>
&lt;/ul>
&lt;h4 id="binarydetection---二进制文件检测系统">BinaryDetection - 二进制文件检测系统
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">BinaryDetection&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> explicit: &lt;span style="color:#a6e22e">grep&lt;/span>::searcher::BinaryDetection &lt;span style="color:#75715e">// 显式指定文件的检测策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> implicit: &lt;span style="color:#a6e22e">grep&lt;/span>::searcher::BinaryDetection &lt;span style="color:#75715e">// 隐式发现文件的检测策略
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>显式 vs 隐式文件处理&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> explicit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> none {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep::searcher::BinaryDetection::none()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep::searcher::BinaryDetection::convert(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\x00&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> implicit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> none {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep::searcher::BinaryDetection::none()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> convert {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep::searcher::BinaryDetection::convert(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\x00&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> grep::searcher::BinaryDetection::quit(&lt;span style="color:#e6db74">b&lt;/span>&lt;span style="color:#e6db74">&amp;#39;\x00&amp;#39;&lt;/span>) &lt;span style="color:#75715e">// 关键差异
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>显式文件&lt;/strong>：用户明确指定，必须搜索，不能“退出”&lt;/li>
&lt;li>&lt;strong>隐式文件&lt;/strong>：目录遍历发现，可以跳过二进制文件&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>三种检测模式&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>&lt;code>none&lt;/code>：禁用二进制检测，当作文本处理 (&lt;code>--text&lt;/code> 或 &lt;code>--null-data&lt;/code>)&lt;/li>
&lt;li>&lt;code>convert(b'\x00')&lt;/code>：将 null 字节转换为换行符继续搜索 (&lt;code>--binary&lt;/code>)&lt;/li>
&lt;li>&lt;code>quit(b'\x00')&lt;/code>：遇到 null 字节立即停止搜索该文件&lt;/li>
&lt;/ol>
&lt;p>默认策略：&lt;/p>
&lt;ul>
&lt;li>显式文件：&lt;code>convert(b'\x00')&lt;/code>&lt;/li>
&lt;li>隐式文件：&lt;code>quit(b'\x00')&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="state---解析状态管理">State - 解析状态管理
&lt;/h4>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-rust" data-lang="rust">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">State&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> is_terminal_stdout: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// stdout 是否连接到终端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> stdin_consumed: &lt;span style="color:#66d9ef">bool&lt;/span>, &lt;span style="color:#75715e">// stdin 是否已被消费
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> cwd: &lt;span style="color:#a6e22e">PathBuf&lt;/span>, &lt;span style="color:#75715e">// 当前工作目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>is_terminal_stdout&lt;/code>：影响颜色输出、缓冲策略等（需跨平台处理）&lt;/li>
&lt;li>&lt;code>stdin_consumed&lt;/code>：防止同时从 stdin 读取模式和内容&lt;/li>
&lt;/ul>
&lt;h3 id="结构体设计的核心思想">结构体设计的核心思想
&lt;/h3>&lt;h4 id="1-职责分离">1. 职责分离
&lt;/h4>&lt;ul>
&lt;li>&lt;code>Patterns&lt;/code>：模式收集和去重&lt;/li>
&lt;li>&lt;code>Paths&lt;/code>：路径管理和推断&lt;/li>
&lt;li>&lt;code>BinaryDetection&lt;/code>：二进制文件处理策略&lt;/li>
&lt;li>&lt;code>State&lt;/code>：解析状态跟踪&lt;/li>
&lt;/ul></description></item></channel></rss>