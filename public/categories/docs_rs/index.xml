<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Docs_rs on zed的博客</title>
        <link>http://localhost:1313/categories/docs_rs/</link>
        <description>Recent content in Docs_rs on zed的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 22 Sep 2025 12:19:53 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/docs_rs/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Regex</title>
        <link>http://localhost:1313/rust/docs_rs_zh/regex/</link>
        <pubDate>Mon, 22 Sep 2025 12:19:53 +0800</pubDate>
        
        <guid>http://localhost:1313/rust/docs_rs_zh/regex/</guid>
        <description>&lt;p&gt;这个crate提供了在字符串中搜索与正则表达式匹配(&lt;code&gt;regular expression&lt;/code&gt;简称&lt;code&gt;regex&lt;/code&gt;)的例程。本库支持的正则表达式语法和其他正则引擎相似，但是缺少了一些无法高效实现的功能。包括但不限于，&lt;code&gt;look-around&lt;/code&gt;和&lt;code&gt;backrefernces&lt;/code&gt;。相应的，本库的正则搜索最差的时间复杂度是&lt;code&gt;O(m * n)&lt;/code&gt;，&lt;code&gt;m&lt;/code&gt;和正则表达式成正比，&lt;code&gt;n&lt;/code&gt;和被搜索的字符串成正比。&lt;/p&gt;
&lt;p&gt;如果你只需要API文档，只需要跳转至[Regex][https://docs.rs/regex/latest/regex/struct.Regex.html]类型。否则，此处是快速示例，展示如何解析类似grep程序的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; regex::Regex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Regex::new(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;(?m)^([^:]+):([0-9]+):(.+)$&amp;#34;&lt;/span&gt;).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; hay &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;path/to/foo:54:Blue Harvest
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;path/to/bar:90:Something, Something, Something, Dark Side
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;path/to/baz:3:It&amp;#39;s a Trap!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; results &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;vec!&lt;/span&gt;[];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (_, [path, lineno, line]) &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; re.captures_iter(hay).map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;c&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; c.extract()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    results.push((path, lineno.parse::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;, line));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;assert_eq!&lt;/span&gt;(results, &lt;span style=&#34;color:#a6e22e&#34;&gt;vec!&lt;/span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;54&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Blue Harvest&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/bar&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;90&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Something, Something, Something, Dark Side&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;path/to/baz&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;It&amp;#39;s a Trap!&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;概述&#34;&gt;概述
&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;本库的主要类型是&lt;code&gt;Regex&lt;/code&gt;。其重要的方法如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Regex::new&lt;/code&gt;使用默认配置编译正则表达式。&lt;code&gt;RegexBuilder&lt;/code&gt;允许配置非默认配置。（例如，不区分大小写匹配，详细模式等。）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Regex::is_match&lt;/code&gt; 报告在特定的haystack是否存在匹配。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Regex::find&lt;/code&gt;报告匹配项在haystack的字节偏移，如果存在的话。&lt;code&gt;Regex::find_iter&lt;/code&gt;返回一个迭代器，用于遍历所有匹配项。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Regex::captures&lt;/code&gt;返回&lt;code&gt;Captures&lt;/code&gt;,它报告了在haystack中匹配的字节偏移量以及从haystack中的regex匹配的每个捕获组的字节偏移量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也有&lt;code&gt;RegexSet&lt;/code&gt;，它允许在一次搜索中搜索多个正则表达式。然而，它只报告匹配的模式而不报告匹配的字节偏移量。&lt;/p&gt;
&lt;p&gt;此外，顶级crate文档组织如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#Usage&#34; &gt;Usage&lt;/a&gt;展示了如何在Rust工程中添加&lt;code&gt;regex&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;#Examples&#34; &gt;Examples&lt;/a&gt;提供了有限的正则表达式示例。&lt;/li&gt;
&lt;li&gt;[Performance][]提供了如何优化正则搜索速度的简单总结。&lt;/li&gt;
&lt;li&gt;[Unicode][]讨论了对non-ASCII的支持。&lt;/li&gt;
&lt;li&gt;[Syntax][]列举了本库明确支持的正则表达式语法。&lt;/li&gt;
&lt;li&gt;[Untrusted input][]讨论了本库如何处理不受信任的regex或haystack。&lt;/li&gt;
&lt;li&gt;[Crate features][]记录了这个库可以被启用或禁用的特性。&lt;/li&gt;
&lt;li&gt;[Other crates][]与正则家族中其他库链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;usage&#34;&gt;Usage
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;regex&lt;/code&gt;在 [crates.io][https://crates.io/crates/regex]上，可以通过在项目&lt;code&gt;Cargo.toml&lt;/code&gt;文件添加&lt;code&gt;regex&lt;/code&gt;到你的依赖项来使用。更简单的方式，只需要&lt;code&gt;cargo run regex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这是一个完整的示例，它创建了一个新的 Rust 项目，添加了对 &lt;code&gt;regex&lt;/code&gt; 的依赖，创建了正则搜索的源代码，然后运行了程序。&lt;/p&gt;
&lt;p&gt;第一步，在新目录新建项目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ mkdir regex-example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cd regex-example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ crago init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二步，添加&lt;code&gt;regex&lt;/code&gt;依赖：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cargo add regex
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三步：编辑&lt;code&gt;src/main.rs&lt;/code&gt;，用以下内容替换其源码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; regex::Regex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; re &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Regex::new(&lt;span style=&#34;color:#e6db74&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello (?&amp;lt;name&amp;gt;\w+)!&amp;#34;&lt;/span&gt;).unwrap();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(caps) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; re.captures(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello Murphy!&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;println!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;no match!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;println!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The name is: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;caps[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第四步，执行&lt;code&gt;cargo run&lt;/code&gt;运行&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cargo run
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Compiling memchr v2.5.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Compiling regex-syntax v0.7.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Compiling aho-corasick v1.0.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Compiling regex v1.8.1
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   Compiling regex-example v0.1.0 &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;/tmp/regex-example&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Finished dev &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;unoptimized + debuginfo&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; target&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; in 4.22s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Running &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;target/debug/regex-example&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The name is: Murphy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;程序第一次运行将展示更多输出，如上所示。但是后续运行不需要重新编译依赖项。、&lt;/p&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples
&lt;/h4&gt;&lt;p&gt;+++++++++++&lt;/p&gt;
&lt;p&gt;本节提供了一些示例，以教程风格展示如何使用正则表达式在haystack中进行搜索。API文档中还有更多示例。&lt;/p&gt;
&lt;p&gt;在开始之前，有必要定义一些术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;regex&lt;/strong&gt;是类型为&lt;code&gt;Regex&lt;/code&gt;的值。我们用&lt;code&gt;re&lt;/code&gt;作为正则表达式的变量名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt;用于构建正则表达式的字符串。我们用&lt;code&gt;pat&lt;/code&gt;作为模式的变量名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;haystack&lt;/strong&gt;是被正则表达式搜索的字符串。我们用&lt;code&gt;hay&lt;/code&gt;作为haystack的变量名。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时候“regex”和“pattern”这两个词会被互换使用。&lt;/p&gt;
&lt;p&gt;在这个crate中，常规表达式的一般使用方法是将一个模式编译成一个正则表达式，然后使用该正则表达式来搜索、分割或替换字符串的一部分。&lt;/p&gt;
&lt;p&gt;++++++&lt;/p&gt;
&lt;p&gt;[原地址][https://docs.rs/regex/latest/regex/ ]&lt;/p&gt;
&lt;p&gt;++++++&lt;/p&gt;
&lt;h4 id=&#34;单词&#34;&gt;单词
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adj.&lt;/code&gt; 冗长的，啰嗦的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;routine&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n.&lt;/code&gt; 常规， 无聊&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adj.&lt;/code&gt; 常规的，无聊的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subsequent&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;adj.&lt;/code&gt;随后的，后来的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
