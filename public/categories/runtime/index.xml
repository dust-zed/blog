<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Runtime on zed的博客</title>
        <link>http://localhost:1313/categories/runtime/</link>
        <description>Recent content in Runtime on zed的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 09 Sep 2025 00:20:36 +0800</lastBuildDate><atom:link href="http://localhost:1313/categories/runtime/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Runtime逐文件阅读学习记录</title>
        <link>http://localhost:1313/rust/tokio/runtime%E9%80%90%E6%96%87%E4%BB%B6%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</link>
        <pubDate>Tue, 09 Sep 2025 00:20:36 +0800</pubDate>
        
        <guid>http://localhost:1313/rust/tokio/runtime%E9%80%90%E6%96%87%E4%BB%B6%E9%98%85%E8%AF%BB%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</guid>
        <description>&lt;h4 id=&#34;thread_idrs&#34;&gt;thread_id.rs
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;主要类&lt;code&gt;ThreadId&lt;/code&gt;，其功能是为线程生成不重复的线程id&lt;/li&gt;
&lt;li&gt;主要学习到的内容
&lt;ul&gt;
&lt;li&gt;内存排序，Atomic类不仅是原子操作，还有内存排序的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;task_hooksrs&#34;&gt;task_hooks.rs
&lt;/h3&gt;&lt;h4 id=&#34;1-核心类型&#34;&gt;1. 核心类型
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;TaskCallback&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskCallback&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std::sync::Arc&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;dyn&lt;/span&gt; Fn(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;TaskMeta&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&amp;#39;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Send &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; Sync&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;表示一个任务回调函数&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;Arc&lt;/code&gt;实现引用计数，支持多线程共享&lt;/li&gt;
&lt;li&gt;接收&lt;code&gt;&amp;amp;TaskMeta&amp;lt;&#39;_&amp;gt;&lt;/code&gt;作为参数，包含任务元数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;TaskMeta&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskMeta&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id: &lt;span style=&#34;color:#a6e22e&#34;&gt;super&lt;/span&gt;::task::Id,         &lt;span style=&#34;color:#75715e&#34;&gt;// 任务ID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    spawned_at: &lt;span style=&#34;color:#a6e22e&#34;&gt;SpawnedAt&lt;/span&gt;,       &lt;span style=&#34;color:#75715e&#34;&gt;// 任务创建位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    _p: &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::marker::PhantomData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&amp;#39;a&lt;/span&gt; ()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;包含任务的基本数据&lt;/li&gt;
&lt;li&gt;使用生命周期参数&lt;code&gt;&#39;a&lt;/code&gt;确保引用的有效性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;TaskHooks&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TaskHooks&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) task_spawn_callback: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TaskCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;//任务生成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) task_terminate_callback: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TaskCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;//任务结束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[cfg(tokio_unstable)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) before_poll_callback: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TaskCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[cfg(tokio_unstable)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;) after_poll_callback: Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;TaskCallback&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在任务不同的状态回调&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;processrs&#34;&gt;process.rs
&lt;/h4&gt;&lt;p&gt;主要解决Unix系统上孤儿进程回收问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;GlobalOrphanQueue&lt;/code&gt;管理需要回收的进程&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;SignalDriver&lt;/code&gt;监听&lt;code&gt;SIGCHLD&lt;/code&gt;信号&lt;/li&gt;
&lt;li&gt;非阻塞地检查子进程状态&lt;/li&gt;
&lt;li&gt;孤儿进程指父进程已经终止或退出，但子进程仍在运行的进程。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SIGCHLD&lt;/code&gt;是用于通知父进程其子进程状态发生变化的信号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;parkrs&#34;&gt;park.rs
&lt;/h4&gt;&lt;p&gt;实现线程的挂起与唤醒&lt;/p&gt;
&lt;h4 id=&#34;driverrs&#34;&gt;driver.rs
&lt;/h4&gt;&lt;p&gt;在tokio运行时中扮演着聚合和管理不同I/O和系统事件驱动器的角色。主要处理线程的挂起和唤醒机制。&lt;/p&gt;
&lt;h5 id=&#34;1-驱动器聚合&#34;&gt;1. 驱动器聚合
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;它聚合了多种底层驱动器，包括I/O驱动器(&lt;code&gt;IoDriver&lt;/code&gt;)，信号驱动器(&lt;code&gt;SingalDriver&lt;/code&gt;)和事件驱动器(&lt;code&gt;TimeDriver&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;2-唤醒挂起支持&#34;&gt;2. 唤醒/挂起支持
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;提供了&lt;code&gt;park()&lt;/code&gt;和&lt;code&gt;unpark()&lt;/code&gt;方法用于线程的挂起和唤醒&lt;/li&gt;
&lt;li&gt;&lt;code&gt;park()&lt;/code&gt;方法会使当前线程进入休眠状态，等待事件发生&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unpark()&lt;/code&gt;方法用于唤醒被挂起的线程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;3-多模式支持&#34;&gt;3. 多模式支持
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;支持启用或禁用特定功能(如I/O驱动)的不同运行时配置&lt;/li&gt;
&lt;li&gt;例如，&lt;code&gt;IoStack&lt;/code&gt;枚举有&lt;code&gt;Enabled&lt;/code&gt;和&lt;code&gt;Disabled&lt;/code&gt;两种变体，分别对应启用和禁用I/O驱动的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;4-超时支持&#34;&gt;4. 超时支持
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;提供了&lt;code&gt;park_timeout()&lt;/code&gt;方法，允许线程唤醒在指定的超时后自动唤醒&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;5-优秀设计&#34;&gt;5. 优秀设计
&lt;/h5&gt;&lt;p&gt;关注点分离，&lt;code&gt;IoStack&lt;/code&gt;关注于parking,&lt;code&gt;IoHandle&lt;/code&gt;关注于unparking&lt;/p&gt;
&lt;h5 id=&#34;configrs&#34;&gt;config.rs
&lt;/h5&gt;&lt;p&gt;runtime命令配置，用于定制运行时行为。以下是各字段的详细说明&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;global_queue_interval: Option&amp;lt;u32&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;控制从全局/远程任务队列拉取任务的频率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;None&lt;/code&gt;表示每次检查全局队列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Some(n)&lt;/code&gt;表示每n个tick检查一次全局队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;event_interval: u32&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行定时器和I/O事件检查的频率&lt;/li&gt;
&lt;li&gt;较小的值提高响应性，但可能增加CPU使用率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;before_park: Option&amp;lt;Callback&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工作线程挂起前执行的回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于执行线程特定的清理或状态保存&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;after_unpark: Option&amp;lt;Callback&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工作线程唤醒后执行的回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于恢复线程特定状态或执行初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;before_spawn: Option&amp;lt;TaskCallback&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个任务生成前执行的回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于任务级别的监控或初始化&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;after_termination: Option&amp;lt;TaskCallback&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个任务终止后执行的回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用于资源清理或统计信息收集&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;before_poll: Option&amp;lt;TaskCallback&amp;gt;&lt;/code&gt;&lt;/strong&gt; (仅限 unstable 特性)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次 poll 操作前执行的回调&lt;/li&gt;
&lt;li&gt;用于性能分析或调试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;after_poll: Option&amp;lt;TaskCallback&amp;gt;&lt;/code&gt;&lt;/strong&gt; (仅限 unstable 特性)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每次 poll 操作后执行的回调&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常与 &lt;code&gt;before_poll&lt;/code&gt; 配对使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LIFO 插槽相关配置&lt;/strong&gt;（代码片段中未完全显示）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用于优化任务调度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特别适用于消息传递等模式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;builderrs&#34;&gt;builder.rs
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Runtime&lt;/code&gt;核心构建配置&lt;/p&gt;
&lt;h5 id=&#34;io驱动&#34;&gt;&lt;strong&gt;I/O驱动&lt;code&gt;enable_io&lt;/code&gt;和&lt;code&gt;nevents&lt;/code&gt;&lt;/strong&gt;
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;enable_io&lt;/code&gt;：是否启用I/O驱动
&lt;ul&gt;
&lt;li&gt;启用时：支持异步I/O操作（如TCP/UDP套接字、文件I/O等）&lt;/li&gt;
&lt;li&gt;禁用时：相关API将不可用，减少运行时开销&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nevents&lt;/code&gt;： 每次轮询时处理的最大事件数
&lt;ul&gt;
&lt;li&gt;影响I/O吞吐量和响应性&lt;/li&gt;
&lt;li&gt;值越大，吞吐量可能越高，但延迟可能增加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;事件驱动enable_time&#34;&gt;事件驱动(&lt;code&gt;enable_time&lt;/code&gt;)
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;控制是否启用时间相关的功能&lt;/li&gt;
&lt;li&gt;启用时：
&lt;ul&gt;
&lt;li&gt;支持&lt;code&gt;tokio::time&lt;/code&gt;模块（如&lt;code&gt;sleep&lt;/code&gt;、&lt;code&gt;timeout&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;允许使用定时器和时间相关的异步操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;禁用时：
&lt;ul&gt;
&lt;li&gt;减少运行时开销&lt;/li&gt;
&lt;li&gt;事件相关&lt;code&gt;API&lt;/code&gt;将不可用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;时钟控制start_paused&#34;&gt;时钟控制(&lt;code&gt;start_paused&lt;/code&gt;)
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;控制运行时时钟的初始状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;：时钟从暂停状态开始
&lt;ul&gt;
&lt;li&gt;时间不会自动推进&lt;/li&gt;
&lt;li&gt;适用于测试，可以精确控制时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt;(默认)：使用系统时钟
&lt;ul&gt;
&lt;li&gt;时间正常流逝&lt;/li&gt;
&lt;li&gt;适用于生产环境&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;时间驱动time-wheel实现&#34;&gt;时间驱动(Time Wheel)实现
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;使用多级时间轮管理定时器&lt;/li&gt;
&lt;li&gt;每个时间轮有不同的精度，形成层级结构
&lt;ul&gt;
&lt;li&gt;第一级：毫秒级精度&lt;/li&gt;
&lt;li&gt;第二级：秒级精度&lt;/li&gt;
&lt;li&gt;更高层：分钟/小时级精度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优点：O(1) 时间复杂度插入/删除定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;系统调用&#34;&gt;系统调用
&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;主要使用 &lt;code&gt;timerfd&lt;/code&gt; (Linux) 或 &lt;code&gt;kqueue&lt;/code&gt; (macOS) 等系统级定时器&lt;/li&gt;
&lt;li&gt;与 I/O 多路复用集成，统一事件循环&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;与io驱动的集成&#34;&gt;与I/O驱动的集成
&lt;/h5&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 简化的时间轮结构
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TimeWheel&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 不同精度的时间轮
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    wheels: [Wheel; &lt;span style=&#34;color:#66d9ef&#34;&gt;LEVELS&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 当前时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    now: &lt;span style=&#34;color:#66d9ef&#34;&gt;u64&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
