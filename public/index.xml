<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zed的博客</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on zed的博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 30 Jun 2025 15:13:25 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>协程原理</title>
      <link>http://localhost:1313/android-develop/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 30 Jun 2025 15:13:25 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/%E5%8D%8F%E7%A8%8B%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;Kotlin协程的本质是&lt;strong&gt;通过状态机管理挂起点，由编译器进行CPS变换实现的轻量级并发抽象&lt;/strong&gt;。其核心原理和状态推进机制如下：&lt;/p&gt;&#xA;&lt;h4 id=&#34;核心原理&#34;&gt;核心原理&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-挂起函数&#34;&gt;1. 挂起函数&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用suspend修饰的函数&lt;/li&gt;&#xA;&lt;li&gt;编译器会将其编译为&lt;strong&gt;状态机代码&lt;/strong&gt;(而非阻塞线程)，支持在任意位置挂起/恢复&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-续体&#34;&gt;2. 续体&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;类似回调的接口&lt;code&gt;Continuation&amp;lt;T&amp;gt;&lt;/code&gt;，其关键方法是&lt;code&gt;resumeWith(result)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;协程的每一步执行都依附于一个续体对象，存储当前执行状态和上下文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;3-状态机转换&#34;&gt;3. 状态机转换&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译器将挂起函数拆解成一个状态机（通过&lt;code&gt;label&lt;/code&gt;标记状态）&lt;/li&gt;&#xA;&lt;li&gt;每个挂起点对应一个状态迁移&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;状态推进流程&#34;&gt;状态推进流程&lt;/h4&gt;&#xA;&lt;p&gt;以下代码展示状态机的运作：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;suspend&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchData&lt;/span&gt;(): String {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; data1 = fetchPart1()  &lt;span style=&#34;color:#75715e&#34;&gt;//挂起点1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; data2 = fetchPart2()  &lt;span style=&#34;color:#75715e&#34;&gt;//挂起点2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; data1 + data2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;编译器转换后（伪代码）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FetchDataStateMachine&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; completion: Continuation&amp;lt;String&amp;gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; label: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) : Continuation&amp;lt;Unit&amp;gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; data1: String? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; data2: String? = &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resumeWith&lt;/span&gt;(result: Result&amp;lt;Any?&amp;gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;when&lt;/span&gt;(label) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        label = &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fetchPart1(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data1 = result.getOrThrow() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; String&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        label = &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fetchPart2(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data2 = result.getOrThrow() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; String&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        completion.resumeWith(data1 + data2)&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;//返回最终结果&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h4 id=&#34;关键机制&#34;&gt;关键机制&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-挂起不阻塞线程&#34;&gt;1. 挂起不阻塞线程：&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;协程挂起时，底层线程立即释放（例如返回到线程池），避免资源浪费&lt;/li&gt;&#xA;&lt;li&gt;异步操作完成后，任务被派发到合适的线程继续执行（通过&lt;code&gt;Dispatcher&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2续体传递风格&#34;&gt;2.续体传递风格&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;挂起函数被编译为接受额外&lt;code&gt;Continuation&lt;/code&gt;参数的函数&lt;/li&gt;&#xA;&lt;li&gt;例如&lt;code&gt;suspend fun foo()&lt;/code&gt; → &lt;code&gt;fun foo(continuation: Continuation)&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;3-协程上下文coroutinecontext&#34;&gt;3. 协程上下文（CoroutineContext）&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过&lt;code&gt;CoroutineContext&lt;/code&gt;传递调度器、异常处理器等。&lt;/li&gt;&#xA;&lt;li&gt;状态机中通过&lt;code&gt;Continuation.context&lt;/code&gt;获取当前上下文&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;4-结构化并发&#34;&gt;4. 结构化并发&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;协程树通过父-子关系管理生命周期&lt;/li&gt;&#xA;&lt;li&gt;父协程取消时，自动取消所有子协程&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;状态推进&#34;&gt;状态推进&lt;/h4&gt;&#xA;&lt;p&gt;在&lt;code&gt;FetchDataStateMachine&lt;/code&gt;的&lt;code&gt;resumeWith&lt;/code&gt;中并没有循环，label的状态是如何推进的呢？实际上状态推进是通过&lt;strong&gt;递归链式调用与间接跳转&lt;/strong&gt;实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gradle相关知识</title>
      <link>http://localhost:1313/android-develop/gradle%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Sun, 29 Jun 2025 15:26:57 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/gradle%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h3 id=&#34;一插件plugins-vs-库libraries&#34;&gt;一、插件(Plugins) vs 库(Libraries)&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;&lt;strong&gt;特征&lt;/strong&gt;&lt;/th&gt;&#xA;          &lt;th&gt;插件 (Plugins)&lt;/th&gt;&#xA;          &lt;th&gt;库 (Libraries)&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;本质&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;构建逻辑扩展工具&lt;/td&gt;&#xA;          &lt;td&gt;运行时依赖的代码组件&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;添加任务/配置/目录结构&lt;/td&gt;&#xA;          &lt;td&gt;提供可调用的具体代码实现&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;声明位置&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;plugins {}&lt;/code&gt; 块&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;dependencies {}&lt;/code&gt; 块&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;影响范围&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;构建过程&lt;/td&gt;&#xA;          &lt;td&gt;运行时或编译时&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;strong&gt;典型示例&lt;/strong&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;java&lt;/code&gt;，&lt;code&gt;android&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;gson&lt;/code&gt;, &lt;code&gt;junit&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h4 id=&#34;1-插件详解&#34;&gt;1. 插件详解&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;核心作用&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;添加新任务（如 &lt;code&gt;compileJava&lt;/code&gt;, &lt;code&gt;assemble&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;定义默认目录结构（如 &lt;code&gt;src/main/java&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;引入预置配置（如 &lt;code&gt;implementation&lt;/code&gt; 依赖配置）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;plugins &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.android.application&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Android APP插件&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    id &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;org.jetbrains.kotlin.android&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// Kotlin支持&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;2-库详解&#34;&gt;2. 库详解&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;关键特征&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;通过坐标声明：&lt;code&gt;group:name:version&lt;/code&gt;（如 &lt;code&gt;com.google.guava:guava:32.0-jre&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;传递依赖&lt;/strong&gt;：库可能自带其他依赖（如 Retrofit 自动引入 OkHttp）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;使用场景&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    implementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;androidx.core:core-ktx:1.12.0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 主代码依赖&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    testImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;junit:junit:4.13.2&amp;#39;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 测试代码专用&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二依赖配置详解&#34;&gt;二、依赖配置详解&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1-implementation最常用&#34;&gt;1. &lt;code&gt;implementation&lt;/code&gt;（最常用）&lt;/h4&gt;&#xA;&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Android打包apk流程</title>
      <link>http://localhost:1313/android-develop/android%E6%89%93%E5%8C%85apk%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Sat, 28 Jun 2025 12:15:42 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/android%E6%89%93%E5%8C%85apk%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;p&gt;android应用的打包流程是将代码、资源文件、清单文件等编译和压缩成可在设备上安装的APK/AAB文件的过程。以下是详细步骤：&lt;/p&gt;&#xA;&lt;h4 id=&#34;一主要流程&#34;&gt;一、主要流程&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-编写代码与资源管理&#34;&gt;1. 编写代码与资源管理&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;创建&lt;code&gt;/src&lt;/code&gt;目录存放Kotlin/Java源码&lt;/li&gt;&#xA;&lt;li&gt;在&lt;code&gt;/res&lt;/code&gt;目录添加资源&lt;/li&gt;&#xA;&lt;li&gt;配置&lt;code&gt;AndroidManifest.xml&lt;/code&gt;(声明组件、权限等)。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-依赖管理&#34;&gt;2. 依赖管理&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在build.gradle中添加所需依赖库&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;3-编译过程&#34;&gt;3. 编译过程&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译代码： kotlin源码 → &lt;code&gt;.class&lt;/code&gt;字节码（javac/kotlinc）&lt;/li&gt;&#xA;&lt;li&gt;转换为Dex：&lt;code&gt;.class&lt;/code&gt;文件→ &lt;code&gt;.dex&lt;/code&gt;文件（&lt;code&gt;d8&lt;/code&gt;/&lt;code&gt;dx&lt;/code&gt;工具），用于Android的ART虚拟机&lt;/li&gt;&#xA;&lt;li&gt;编译资源：&lt;code&gt;AAPT2&lt;/code&gt;编译资源文件（&lt;code&gt;res/&lt;/code&gt; → 二进制格式），生成&lt;code&gt;R.java&lt;/code&gt;和临时资源包(&lt;code&gt;.flat&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;4打包与签名&#34;&gt;4.打包与签名&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;合并资源： AAPT2链接编译后的资源，生成resources.arsc（资源索引表）和优化后的res/目录&lt;/li&gt;&#xA;&lt;li&gt;打包成APK：APK Builder将以下文件合并为未签名的APK：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译后的字节码(&lt;code&gt;.dex&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;资源文件(&lt;code&gt;res/&lt;/code&gt; + &lt;code&gt;resources.arsc&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;原生库(&lt;code&gt;.so&lt;/code&gt;，若有JNI)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;签名APK：使用签名证书(keystore)进行V1/V2/V3签名(通过&lt;code&gt;apksigner&lt;/code&gt; 或Gradle配置)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;5优化与对齐&#34;&gt;5.优化与对齐&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ZIP对齐：&lt;code&gt;zipalign&lt;/code&gt;优化APK文件结构(4字节对齐)，减少运行时内存占用&lt;/li&gt;&#xA;&lt;li&gt;生成最终的APK：输出&lt;code&gt;app-release.apk&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;二名词解释&#34;&gt;二、名词解释&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-临时资源包&#34;&gt;1. 临时资源包&lt;/h5&gt;&#xA;&lt;p&gt;在AAPT2（&lt;code&gt;Android Asset Packaging Tool 2&lt;/code&gt;）的资源预编译阶段会生成.flat文件，这些文件是中间产物&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;独立编译：AAPT2将&lt;code&gt;/res&lt;/code&gt;目录下的每个资源文件单独编译成二进制格式的&lt;code&gt;.flat&lt;/code&gt;文件&lt;/li&gt;&#xA;&lt;li&gt;支持增量编译：若只修改了单个资源文件，只需重新编译该文件的.flat文件，避免全量编译，加快构建速度&lt;/li&gt;&#xA;&lt;li&gt;分阶段处理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译阶段：资源→ &lt;code&gt;.flat&lt;/code&gt;文件&lt;/li&gt;&#xA;&lt;li&gt;链接阶段：合并所有&lt;code&gt;.flat&lt;/code&gt;文件 → 生成&lt;code&gt;resources.arsc&lt;/code&gt;和最终的&lt;code&gt;res/&lt;/code&gt;目录&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;优势&#xA;&lt;ul&gt;&#xA;&lt;li&gt;提升大型项目的编译速度&lt;/li&gt;&#xA;&lt;li&gt;支持资源混淆&lt;/li&gt;&#xA;&lt;li&gt;更严格的资源验证&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h5 id=&#34;2-对齐&#34;&gt;2. 对齐&lt;/h5&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存对齐&lt;/strong&gt;：解决CPU访问效率问题（&lt;code&gt;数据项首地址 % n == 0&lt;/code&gt;），但会增加数据结构大小&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;文件对齐(zipalign)&lt;/strong&gt;:解决内存映射效率的问题（&lt;code&gt;文件偏移 % 4096 == 0&lt;/code&gt;），通过消除跨页碎片减少运行时内存占用&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存页机制&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统内存管理以**页(通常4KB)**为单位&lt;/li&gt;&#xA;&lt;li&gt;对齐后，每次文件读取 = 整数倍内存页 → &lt;strong&gt;减少I/O次数&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Choreographer类解析</title>
      <link>http://localhost:1313/android-develop/choreographer%E7%B1%BB%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 16 Jun 2025 06:49:21 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/choreographer%E7%B1%BB%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h4 id=&#34;一核心作用&#34;&gt;一、核心作用&lt;/h4&gt;&#xA;&lt;p&gt;Choreographer是Android系统&lt;strong&gt;协调动画、输入和绘制操作的核心调度器&lt;/strong&gt;。它通过VSYNC信号确保帧的渲染与屏幕刷新率同步，避免画面撕裂和卡顿。&lt;/p&gt;&#xA;&lt;h4 id=&#34;二关键概念&#34;&gt;二、关键概念&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;VSYNC：垂直同步信号，表示屏幕开始刷新新的一帧&lt;/li&gt;&#xA;&lt;li&gt;Frame Callbacks：注册的回调函数，在下一帧的特定阶段执行&lt;/li&gt;&#xA;&lt;li&gt;Callback Types（按执行顺序排序）&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CALLBACK_INPUT&lt;/li&gt;&#xA;&lt;li&gt;CALLBACK_ANIMATION&lt;/li&gt;&#xA;&lt;li&gt;CALLBACK_INSETS_ANIMATION&lt;/li&gt;&#xA;&lt;li&gt;CALLBACK_TRAVERSAL&lt;/li&gt;&#xA;&lt;li&gt;CALLBACK_COMMIT&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Choreographer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 五种回调类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_INPUT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_ANIMATION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_INSETS_ANIMATION &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 2;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_TRAVERSAL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 3;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_COMMIT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 4;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; CALLBACK_LAST &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; CALLBACK_COMMIT; &lt;span style=&#34;color:#75715e&#34;&gt;// 最后一种类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 单例模式实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Choreographer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; sThreadInstance &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ThreadLocal&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Choreographer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;protected&lt;/span&gt; Choreographer &lt;span style=&#34;color:#a6e22e&#34;&gt;initialValue&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Looper looper &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Looper.&lt;span style=&#34;color:#a6e22e&#34;&gt;myLooper&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Choreographer(looper, VSYNC_SOURCE_APP);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 回调队列数组&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; CallbackQueue&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; mCallbackQueues;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// VSYNC 接收器&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; FrameDisplayEventReceiver mDisplayEventReceiver;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 处理消息的Handler&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; FrameHandler mHandler;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;三核心架构图解&#34;&gt;三、核心架构图解&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tex&#34; data-lang=&#34;tex&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────────────────────┐       ┌───────────────────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│    VSYNC 信号源        │──────&amp;gt;│ FrameDisplayEventReceiver │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────────────────────┘       │  (接收硬件VSYNC信号)     │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                └───────────┬───────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                            ▼&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────────────────────┐       ┌───────────────────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│     FrameHandler       │&amp;lt;──────│    onVsync()          │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   (处理3类消息)        │──────&amp;gt;│    scheduleVsync()    │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────────┬───────────┘       └───────────────────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ▼&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────────────────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│      doFrame()         │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ (帧处理核心方法)       │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────────┬───────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ▼&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;┌───────────────────────┐&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   CallbackQueue[]      │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│ (5种类型回调链表)      │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└───────────────────────┘&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;三回调添加入口&#34;&gt;三、回调添加入口&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-添加回调入口&#34;&gt;1. 添加回调入口&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postCallback&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; callbackType, Runnable action, Object token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    postCallbackDelayed(callbackType, action, token, 0);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postCallbackDelayed&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; callbackType, Runnable action, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; delayMillis) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    postCallbackDelayedInternal(callbackType, action, token, delayMillis);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;2-内部添加实现&#34;&gt;2. 内部添加实现&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;postCallbackDelayedInternal&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; callbackType,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Object action, Object token, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; delayMillis) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; (mLock) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; SystemClock.&lt;span style=&#34;color:#a6e22e&#34;&gt;uptimeMillis&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; dueTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; delayMillis;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 添加到对应的回调队列&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mCallbackQueues&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;callbackType&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addCallbackLocked&lt;/span&gt;(dueTime, action, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2. 调度帧处理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dueTime &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; now) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 立即调度&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            scheduleFrameLocked(now);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 延迟调度&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;obtainMessage&lt;/span&gt;(MSG_DO_SCHEDULE_CALLBACK, action);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg.&lt;span style=&#34;color:#a6e22e&#34;&gt;arg1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callbackType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtTime&lt;/span&gt;(msg, dueTime);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3-回调链表结构&#34;&gt;3. 回调链表结构&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CallbackQueue&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; CallbackRecord mHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;addCallbackLocked&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; dueTime, Object action, Object token) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CallbackRecord callback &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; obtainCallbackLocked(dueTime, action, token);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (mHead &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mHead &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 链表按照执行时间排序（小到大）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dueTime &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mHead.&lt;span style=&#34;color:#a6e22e&#34;&gt;dueTime&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            callback.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mHead &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CallbackRecord entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dueTime &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;dueTime&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                callback.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            entry &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        entry.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callback;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 链表节点定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CallbackRecord&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CallbackRecord next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; dueTime;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object action; &lt;span style=&#34;color:#75715e&#34;&gt;// Runnable 或 FrameCallback&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Object token;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;四vsync同步机制&#34;&gt;四、VSYNC同步机制&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-vsync请求&#34;&gt;1、 VSYNC请求&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scheduleFrameLocked&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; now) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mFrameScheduled) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mFrameScheduled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (USE_VSYNC) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 通过 FrameDisplayEventReceiver 请求 VSYNC&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (isRunningOnLooperThreadLocked()) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#75715e&#34;&gt;//注册&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                scheduleVsyncLocked();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// 非UI线程发送消息到UI线程&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;obtainMessage&lt;/span&gt;(MSG_DO_SCHEDULE_VSYNC);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                msg.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtFrontOfQueue&lt;/span&gt;(msg);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 无VSYNC直接安排帧&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; nextFrameTime &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;obtainMessage&lt;/span&gt;(MSG_DO_FRAME);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            msg.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtTime&lt;/span&gt;(msg, nextFrameTime);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scheduleVsyncLocked&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mDisplayEventReceiver.&lt;span style=&#34;color:#a6e22e&#34;&gt;scheduleVsync&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;2-vsync接收与处理&#34;&gt;2. VSYNC接收与处理&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FrameDisplayEventReceiver&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; DisplayEventReceiver {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onVsync&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; timestampNanos, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; physicalDisplayId, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; frame) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 1. 计算正确的帧时间&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; System.&lt;span style=&#34;color:#a6e22e&#34;&gt;nanoTime&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; intendedFrameTimeNanos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 2. 发送MSG_DO_FRAME消息&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Message msg &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Message.&lt;span style=&#34;color:#a6e22e&#34;&gt;obtain&lt;/span&gt;(mHandler, MSG_DO_FRAME);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        msg.&lt;span style=&#34;color:#a6e22e&#34;&gt;setAsynchronous&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mHandler.&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageAtTime&lt;/span&gt;(msg, intendedFrameTimeNanos &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; NANOS_PER_MS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;3-帧处理核心---doframe&#34;&gt;3. 帧处理核心 - doFrame()&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doFrame&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; frameTimeNanos, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; frame) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; startNanos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; (mLock) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 检查帧调度状态&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;mFrameScheduled) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 计算跳帧情况&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; jitterNanos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; startNanos &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; frameTimeNanos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (jitterNanos &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; mFrameIntervalNanos) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; skippedFrames &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; jitterNanos &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; mFrameIntervalNanos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 超过阈值打印警告日志&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (skippedFrames &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; SKIPPED_FRAME_WARNING_LIMIT) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                Log.&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;(TAG, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Skipped &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; skippedFrames &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; frames!&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            frameTimeNanos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...; &lt;span style=&#34;color:#75715e&#34;&gt;// 调整帧时间&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mLastFrameTimeNanos &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frameTimeNanos;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mFrameScheduled &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 按优先级顺序执行回调&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mFrameInfo.&lt;span style=&#34;color:#a6e22e&#34;&gt;markInputHandlingStart&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        doCallbacks(Choreographer.&lt;span style=&#34;color:#a6e22e&#34;&gt;CALLBACK_INPUT&lt;/span&gt;, frameTimeNanos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mFrameInfo.&lt;span style=&#34;color:#a6e22e&#34;&gt;markAnimationsStart&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        doCallbacks(Choreographer.&lt;span style=&#34;color:#a6e22e&#34;&gt;CALLBACK_ANIMATION&lt;/span&gt;, frameTimeNanos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mFrameInfo.&lt;span style=&#34;color:#a6e22e&#34;&gt;markPerformTraversalsStart&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        doCallbacks(Choreographer.&lt;span style=&#34;color:#a6e22e&#34;&gt;CALLBACK_TRAVERSAL&lt;/span&gt;, frameTimeNanos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        doCallbacks(Choreographer.&lt;span style=&#34;color:#a6e22e&#34;&gt;CALLBACK_COMMIT&lt;/span&gt;, frameTimeNanos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 清理工作&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;五回调执行处理&#34;&gt;五、回调执行处理&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-执行回调核心逻辑&#34;&gt;1. 执行回调核心逻辑&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;doCallbacks&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; callbackType, &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; frameTimeNanos) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallbackRecord callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; (mLock) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 提取所有到期的回调&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; now &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; frameTimeNanos &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; NANOS_PER_MS;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        callbacks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mCallbackQueues&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;callbackType&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extractDueCallbacksLocked&lt;/span&gt;(now);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (callbacks &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mCallbacksRunning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// 执行链表中的所有回调&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (CallbackRecord c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callbacks; c &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;; c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 执行回调&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (c.&lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;instanceof&lt;/span&gt; Runnable) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ((Runnable) c.&lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ((FrameCallback) c.&lt;span style=&#34;color:#a6e22e&#34;&gt;action&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;doFrame&lt;/span&gt;(frameTimeNanos);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;finally&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; (mLock) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// 回收CallbackRecord对象&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            recycleCallbackRecordsLocked(callbacks);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            mCallbacksRunning &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;2到期回调提取算法&#34;&gt;2.到期回调提取算法&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CallbackRecord &lt;span style=&#34;color:#a6e22e&#34;&gt;extractDueCallbacksLocked&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; now) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallbackRecord callbacks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CallbackRecord next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mHead;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 遍历链表，找出所有dueTime&amp;lt;=now的节点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (next &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; next.&lt;span style=&#34;color:#a6e22e&#34;&gt;dueTime&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; now) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CallbackRecord temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        temp.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; callbacks;  &lt;span style=&#34;color:#75715e&#34;&gt;// 新节点插入链表头部&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        callbacks &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp;       &lt;span style=&#34;color:#75715e&#34;&gt;// 新链表头&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 更新原链表&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mHead &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; next;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 返回的是倒序链表（最近加入的先执行）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; callbacks;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;六choreographer的其他作用&#34;&gt;六、Choreographer的其他作用&lt;/h4&gt;&#xA;&lt;h5 id=&#34;1-帧率监控&#34;&gt;1. 帧率监控&lt;/h5&gt;&#xA;&lt;p&gt;开发者可以通过postFrameCallback实现帧率监控：&lt;/p&gt;</description>
    </item>
    <item>
      <title>包体积优化</title>
      <link>http://localhost:1313/android-develop/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 15 Jun 2025 23:19:59 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/%E5%8C%85%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h4 id=&#34;包体积优化&#34;&gt;包体积优化&lt;/h4&gt;&#xA;&lt;h4 id=&#34;一apk结构分析工具&#34;&gt;一、APK结构分析工具&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Android Studio内置工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用 Build &amp;gt; Analyze APK&lt;/li&gt;&#xA;&lt;li&gt;查看各模块占比(代码/资源/原生库/Assets)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;命令行工具&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew :app:assembleRelease --scan&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;二代码优化&#34;&gt;二、代码优化&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;启用代码混淆与优化&lt;/li&gt;&#xA;&lt;li&gt;移除未使用代码&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用android studio的lint分析未使用代码&lt;/li&gt;&#xA;&lt;li&gt;添加R8配置文件删除无引用代码&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;方法数优化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;启用Multidex前优化&lt;/li&gt;&#xA;&lt;li&gt;使用D8编译器的dex优化&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;三资源优化&#34;&gt;三、资源优化&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;资源压缩与清理&lt;/li&gt;&#xA;&lt;li&gt;移除未使用资源&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 检测未使用资源&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew lintRelease&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 自动移除&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew removeUnusedResources&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;矢量图代替位图&lt;/li&gt;&#xA;&lt;li&gt;Webp格式转换&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;四库优化&#34;&gt;四、库优化&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;仅保留必要ABI&lt;/li&gt;&#xA;&lt;li&gt;轻量库代替&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;五高级优化技术&#34;&gt;五、高级优化技术&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;资源混淆&lt;/li&gt;&#xA;&lt;li&gt;资源分包加载&lt;/li&gt;&#xA;&lt;li&gt;按需加载功能模块&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;六--assets优化&#34;&gt;六 、 Assets优化&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;压缩assets资源：存储时压缩，使用时解压&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;七知识补充&#34;&gt;七、知识补充&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;D8、R8和代码混淆的关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;D8负责字节码到Dex的精确转换&lt;/li&gt;&#xA;&lt;li&gt;R8 = D8 + 裁剪 + 优化 + 混淆&lt;/li&gt;&#xA;&lt;li&gt;混淆是R8的战术武器：仅负责名称混淆（对体积影响小，对安全性关键）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;开启R8 ≈ D8编译 + 三重优化(裁剪/优化/混淆)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>内存管理最佳实践</title>
      <link>http://localhost:1313/android-develop/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Sun, 15 Jun 2025 13:05:49 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h4 id=&#34;一内存管理原则&#34;&gt;一、内存管理原则&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;理解Android内存模型&#xA;&lt;ul&gt;&#xA;&lt;li&gt;基于JVM垃圾回收机制，采用分代回收策略&lt;/li&gt;&#xA;&lt;li&gt;内存不足是触发&lt;code&gt;onTrimMemory()&lt;/code&gt;，开发者需响应此回调释放资源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;避免内存泄漏根源&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态引用：禁止用static持有Activity/Context（用Application Context代替）&lt;/li&gt;&#xA;&lt;li&gt;非静态内部类：改用静态内部类+弱引用&lt;/li&gt;&#xA;&lt;li&gt;资源未释放：关闭Cursor、File、Bitmap等资源。gc只释放java对象本身，在jvm堆中，系统资源需要显示释放&lt;/li&gt;&#xA;&lt;li&gt;集合对象：及时清理无用的集合元素&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;优化关键组件&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Activity/Fragment&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在onDestroy中解除BroadcastReceiver、Handler注册，移除回调&lt;/li&gt;&#xA;&lt;li&gt;避免在异步任务中直接引用View&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Handler&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用静态内部类 + WeakReference。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;单例模式&#xA;&lt;ul&gt;&#xA;&lt;li&gt;传递Application Context，而非Activity Context&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;大对象优化&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Bitmap&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用inSampleSize压缩图片，采用Glide等库管理内存&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;数据缓存&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优先使用LruCache和DiskLruCache&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;二内存泄漏排查工具&#34;&gt;二、内存泄漏排查工具&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Android Profiler&lt;/li&gt;&#xA;&lt;li&gt;LeakCanary&lt;/li&gt;&#xA;&lt;li&gt;MAT&lt;/li&gt;&#xA;&lt;li&gt;StrictMode&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h3 id=&#34;二内存泄漏排查工具-1&#34;&gt;&lt;strong&gt;二、内存泄漏排查工具&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Android Profiler（Android Studio）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存监控&lt;/strong&gt;：实时查看堆内存使用情况。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Heap Dump&lt;/strong&gt;：捕获堆快照，分析对象引用链。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Allocation Tracker&lt;/strong&gt;：跟踪短时间内的内存分配。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;LeakCanary（自动化检测）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;集成步骤：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;debugImplementation &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;com.squareup.leakcanary:leakcanary-android:2.9.1&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;自动检测泄漏并生成报告，定位泄漏引用链。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;MAT（Memory Analyzer Tool）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;分析Heap Dump步骤：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;用Android Profiler导出&lt;code&gt;.hprof&lt;/code&gt;文件。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;通过&lt;code&gt;hprof-conv&lt;/code&gt;转换格式（Android SDK工具）：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hprof-conv input.hprof output.hprof&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;在MAT中打开，通过&lt;strong&gt;Dominator Tree&lt;/strong&gt;和&lt;strong&gt;Path to GC Roots&lt;/strong&gt;分析泄漏对象。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;StrictMode&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;检测主线程磁盘/网络操作，间接避免内存问题：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;StrictMode.&lt;span style=&#34;color:#a6e22e&#34;&gt;setVmPolicy&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; VmPolicy.&lt;span style=&#34;color:#a6e22e&#34;&gt;Builder&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;detectActivityLeaks&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;detectLeakedClosableObjects&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;penaltyLog&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>View性能优化</title>
      <link>http://localhost:1313/android-develop/view%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Fri, 13 Jun 2025 23:55:35 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/view%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h3 id=&#34;android-view-性能优化体系&#34;&gt;Android View 性能优化体系&lt;/h3&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;一规避过度绘制gpu优化&#34;&gt;一、规避过度绘制（GPU优化）&lt;/h3&gt;&#xA;&lt;p&gt;专注于减少GPU的无效像素填充负载&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;概念解析：&lt;/strong&gt;&lt;br&gt;&#xA;GPU在单个像素点重复绘制超过2.5次（1x绘制+1.5x半透明混合）的现象，消耗填充率导致帧率下降&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;检测工具：&lt;/strong&gt;&lt;br&gt;&#xA;&lt;code&gt;开发者选项-&amp;gt;调试GPU过度绘制&lt;/code&gt;（蓝色&amp;lt;1x, 绿色&amp;lt;2x, 粉色&amp;lt;3x, 红色≥4x）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心策略：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;移除无效背景层：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;检查并移除Activity根布局或主题中冗余的&lt;code&gt;windowBackground&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;删除被完全覆盖的中间层布局（如FrameLayout）背景&lt;/li&gt;&#xA;&lt;li&gt;避免在自定义View的&lt;code&gt;onDraw()&lt;/code&gt;中绘制被覆盖区域&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;层级扁平化：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用&lt;code&gt;ConstraintLayout&lt;/code&gt;替代多层嵌套布局&lt;/li&gt;&#xA;&lt;li&gt;减少RelativeLayout导致的二次测量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;透明效果控制：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;避免大面积半透明视图（引发GPU混合计算）&lt;/li&gt;&#xA;&lt;li&gt;硬件层动画结束时立即禁用（&lt;code&gt;setLayerType(LAYER_TYPE_NONE)&lt;/code&gt;）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;引用关键通用技术：&lt;/strong&gt;&lt;br&gt;&#xA;结合&lt;code&gt;clipRect/quickReject&lt;/code&gt;限定绘制区域（详见通用技术章节）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;二绘制指令优化cpu优化&#34;&gt;二、绘制指令优化（CPU优化）&lt;/h3&gt;&#xA;&lt;p&gt;降低CPU生成绘制指令的开销&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;优化焦点：&lt;/strong&gt;&lt;br&gt;&#xA;&lt;code&gt;onDraw()&lt;/code&gt;方法的执行效率与资源管理&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;核心准则：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;禁止内存分配：&lt;/strong&gt;&lt;br&gt;&#xA;绝不在&lt;code&gt;onDraw()&lt;/code&gt;中创建Paint/Path/Bitmap对象（应在构造方法初始化）&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;规避耗时操作：&lt;/strong&gt;&lt;br&gt;&#xA;避免复杂计算、IO或解析逻辑&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;阻断递归触发：&lt;/strong&gt;&lt;br&gt;&#xA;禁止在&lt;code&gt;onDraw()&lt;/code&gt;中调用&lt;code&gt;invalidate()&lt;/code&gt;或&lt;code&gt;requestLayout()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高级技巧：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;绘图资源复用：&lt;/strong&gt;&lt;br&gt;&#xA;对矢量图(VectorDrawable)和位图采用不同优化策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;小图标优先使用矢量图&lt;/li&gt;&#xA;&lt;li&gt;位图加载启用&lt;code&gt;inSampleSize&lt;/code&gt;采样和&lt;code&gt;RGB_565&lt;/code&gt;解码&lt;/li&gt;&#xA;&lt;li&gt;使用&lt;code&gt;ImageView.setImageDrawable()&lt;/code&gt;替代&lt;code&gt;canvas.drawBitmap()&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;透明效果实现：&lt;/strong&gt;&lt;br&gt;&#xA;优先使用&lt;code&gt;View.setAlpha()&lt;/code&gt;而非半透明背景色&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;引用关键通用技术：&lt;/strong&gt;&lt;br&gt;&#xA;精准控制硬件加速生命周期（详见通用技术章节）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;三通用核心技术&#34;&gt;三、通用核心技术&lt;/h3&gt;&#xA;&lt;p&gt;跨优化领域的共性技术方案&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;区域裁剪技术：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;graph TB&#xA;  A[canvas.clipRect] --&amp;gt; B[限定子View绘制区域]&#xA;  C[canvas.quickReject] --&amp;gt; D[跳过屏幕外区域绘制]&#xA;  A--&amp;gt;|ViewGroup| E[重写dispatchDraw控制]&#xA;  C--&amp;gt;|自定义View| F[onDraw中预判可见性]&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;&#xA;&lt;li&gt;在&lt;code&gt;ViewGroup.drawChild&lt;/code&gt;中限定子View绘制边界&lt;/li&gt;&#xA;&lt;li&gt;列表项等非重叠视图必备优化手段&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;硬件加速深度指南：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;运作机制：&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将View缓存为GPU纹理(Texture)&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;setLayerType(LAYER_TYPE_HARDWARE, null)&lt;/code&gt;启用&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;最佳实践：&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于硬件加速</title>
      <link>http://localhost:1313/android-develop/%E5%85%B3%E4%BA%8E%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/</link>
      <pubDate>Fri, 13 Jun 2025 22:50:57 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/%E5%85%B3%E4%BA%8E%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/</guid>
      <description>&lt;h4 id=&#34;一硬件加速核心概念&#34;&gt;一、硬件加速核心概念&lt;/h4&gt;&#xA;&lt;p&gt;硬件加速是将图形渲染中的光栅化从CPU转移到GPU执行的技术。CPU只需要生成&lt;strong&gt;绘制指令集(DisplayList)&lt;/strong&gt;，由GPU进行高效的并行光栅化计算，最终写入图形缓冲区提供屏幕显示。&lt;/p&gt;&#xA;&lt;p&gt;本质：CPU负责逻辑指令，GPU负责繁重像素计算，分工协作提升效率&lt;/p&gt;&#xA;&lt;p&gt;光栅化：可以高度抽象的概括为&lt;strong&gt;计算屏幕上每个像素点最终显示的ARGB值&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;二硬件加速启用前后的核心流程对比&#34;&gt;二、硬件加速启用前后的核心流程对比&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;未启用硬件加速&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;measure &amp;amp; layout&lt;/strong&gt;：由CPU在主线程（UI线程）执行&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Draw&lt;/strong&gt;（关键区别）：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU：遍历View树，在主线程直接执行每个View的onDraw(Canvas)方法&lt;/li&gt;&#xA;&lt;li&gt;光栅化：onDraw中的绘制指令也由CPU执行，直接计算出最终的像素值。&lt;/li&gt;&#xA;&lt;li&gt;缓冲区(Frame Buffer)&#xA;&lt;ul&gt;&#xA;&lt;li&gt;系统维护一个帧缓冲区。&lt;/li&gt;&#xA;&lt;li&gt;CPU光栅化好的像素数据直接写入这个帧缓冲区&lt;/li&gt;&#xA;&lt;li&gt;核心：CPU既处理逻辑计算又处理生成最终像素的繁重计算(光栅化)，然后把结果放进帧缓冲&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;合成 &amp;amp; 显示&lt;/strong&gt;：屏幕读取帧缓冲区的内容显示到屏幕上。这个过程通常涉及双缓冲和Vsync信号来避免撕裂，但其绘制核心是CPU&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Front Buffer是屏幕当前帧显示的内容，Back Buffer是屏幕下一帧要显示的内容&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;开启硬件加速&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Measure &amp;amp; Layout&lt;/strong&gt;：仍然由CPU在主线程执行。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Draw&lt;/strong&gt;(关键区别)：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU：遍历View树，在主线程执行每个View的**&lt;code&gt;onDraw(Canvas)&lt;/code&gt;**方法。但是这里的&lt;code&gt;Canvas&lt;/code&gt;行为不同了&lt;/li&gt;&#xA;&lt;li&gt;Display List：onDraw(Canvas)中的绘制指令不再立即光栅化，而是被记录到DisplayList的数据结构中。DisplayList本质是一系列GPU能理解的绘图操作指令的序列化表示&lt;/li&gt;&#xA;&lt;li&gt;光栅化：由GPU执行，CPU将构建好的&lt;code&gt;DisplayList&lt;/code&gt;提交给GPU。GPU驱动程序将这些高级绘图指令&lt;strong&gt;并行地、高效地光栅化&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓冲区&lt;/strong&gt;(Frame Buffer / GRALLOC Buffers):&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;普通开启硬件加速时的缓冲区：&lt;/strong&gt; GPU 将光栅化&lt;strong&gt;好的像素数据写入系统分配的图形缓冲区&lt;/strong&gt; (通常是通过 &lt;code&gt;Gralloc&lt;/code&gt; 分配管理的 Buffer Queue 中的缓冲区，如 &lt;code&gt;SurfaceTexture&lt;/code&gt;)。这些缓冲区&lt;strong&gt;就是屏幕最终合成时使用的像素数据源&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;核心：CPU负责记录绘制命令(onDraw -&amp;gt; DisplayList)；GPU负责光栅化，结果写入图形缓冲区&lt;/li&gt;&#xA;&lt;li&gt;Frame Buffer是抽象的缓冲区，而GRALLOC Buffers是物理缓冲区&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;三启用硬件层&#34;&gt;三、启用硬件层&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：对像素不会频繁变化的View采用空间换时间的方案，避免View内容未变时重复光栅化，用于后续快速合成&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：仅当视图内容改变(&lt;code&gt;invalidate()&lt;/code&gt;)时或主动更新时：GPU重新光栅化该View的DisplayList -&amp;gt; 更新离屏纹理。而只涉及纹理的变换时，不会重新光栅化DisplayList，而是直接使用纹理缓存进行合成，纹理变换正是GPU擅长的。纹理变换和opengl管线工作流程中的顶点变换是不同的层级概念&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;适合&lt;strong&gt;小面积静态视图&lt;/strong&gt;或&lt;strong&gt;属性动画&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;避免对大视图（如列表视图）启用，易耗尽显存&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>面试问题收集</title>
      <link>http://localhost:1313/android-develop/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</link>
      <pubDate>Fri, 13 Jun 2025 09:30:56 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;h4 id=&#34;一bitmap内存优化&#34;&gt;一、Bitmap内存优化&lt;/h4&gt;&#xA;&lt;p&gt;Bitmap是内存消耗大户，通过以下方法减少占用：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;降低色彩解析模式&lt;/strong&gt;&lt;br&gt;&#xA;使用RGB565等低色彩模式，将单个像素的字节大小从32位（ARGB8888）减少到16位，显著节省内存。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;合理放置资源文件&lt;/strong&gt;&lt;br&gt;&#xA;高分辨率图片应放置在高密度目录（如&lt;code&gt;drawable-xxhdpi&lt;/code&gt;），避免系统自动缩放导致内存浪费。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缩小图片尺寸&lt;/strong&gt;&lt;br&gt;&#xA;加载时通过&lt;code&gt;BitmapFactory.Options&lt;/code&gt;动态调整采样率（&lt;code&gt;inSampleSize&lt;/code&gt;），或使用&lt;code&gt;createScaledBitmap()&lt;/code&gt;减少宽高尺寸。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;二viewmodel与livedata机制&#34;&gt;二、ViewModel与LiveData机制&lt;/h4&gt;&#xA;&lt;p&gt;ViewModel和LiveData是Jetpack组件，用于数据生命周期管理和响应式UI更新。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;粘性事件（Sticky Event）&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：当新观察者订阅&lt;code&gt;LiveData&lt;/code&gt;时，若已有存储值，会立即收到最后一次更新（旧数据）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;示例&lt;/strong&gt;：屏幕旋转后，新Activity观察LiveData时触发UI更新（旧数据）。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;来源&lt;/strong&gt;：基于LiveData的版本号对比机制。代码关键部分如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LiveData&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; START_VERSION; &lt;span style=&#34;color:#75715e&#34;&gt;// LiveData当前版本（初始-1）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LifecycleBoundObserver&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; ObserverWrapper {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mLastVersion &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; START_VERSION;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;considerNotify&lt;/span&gt;(ObserverWrapper observer) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (observer.&lt;span style=&#34;color:#a6e22e&#34;&gt;mLastVersion&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; mVersion) { &lt;span style=&#34;color:#75715e&#34;&gt;// 核心判断：版本号落后才分发&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      observer.&lt;span style=&#34;color:#a6e22e&#34;&gt;mLastVersion&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; mVersion;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      observer.&lt;span style=&#34;color:#a6e22e&#34;&gt;mObserver&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onChanged&lt;/span&gt;((T)data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;简单解法&lt;/strong&gt;：使用&lt;code&gt;Event&lt;/code&gt;包装数据。事件消费后置空值，避免旧数据触发更新。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;ViewModel临时数据保存机制&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存中保存&lt;/strong&gt;&lt;br&gt;&#xA;ViewModel对象存储在&lt;code&gt;ViewModelStore&lt;/code&gt;中。当配置变更（如屏幕旋转）时：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Activity/Fragment被销毁重建。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ViewModelStore&lt;/code&gt;被系统保留（绑定到&lt;code&gt;NonConfigurationInstances&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;新建Activity/Fragment时自动恢复ViewModel实例。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;数据范围与最佳实践&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;保留场景&lt;/strong&gt;：屏幕旋转、分屏切换、系统语言更改。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;不保留场景&lt;/strong&gt;：用户退出应用、系统资源不足杀死进程、Activity被finish()。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;最佳实践&lt;/strong&gt;：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;ViewModel解决配置变更的&lt;strong&gt;临时数据保存&lt;/strong&gt;（内存级）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SavedStateHandle&lt;/code&gt;解决进程被杀死时的&lt;strong&gt;关键数据持久化&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;复杂数据应使用数据库等持久化方案。&lt;/li&gt;&#xA;&lt;li&gt;避免内存泄漏：勿在ViewModel持有Context/View引用，必要时用&lt;code&gt;Application Context&lt;/code&gt;代替。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;三view基础原理&#34;&gt;三、View基础原理&lt;/h4&gt;&#xA;&lt;p&gt;深入理解View的测量、布局、绘制机制，是优化UI性能的核心。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;MeasureSpec计算与布局优化&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;MeasureSpec原理&lt;/strong&gt;：父容器传递给子View的测量要求，由大小和模式组成，取决于父容器的MeasureSpec和子View的LayoutParams。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;父布局根据自身MeasureSpec和子View LayoutParams，确定子View的MeasureSpec，再调用&lt;code&gt;children.measure()&lt;/code&gt;，最终确定自身尺寸。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;布局性能优化&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;缓存MeasureSpec计算结果：固定尺寸View（如按钮）直接调用&lt;code&gt;setMeasuredDimension()&lt;/code&gt;设置宽高。&lt;/li&gt;&#xA;&lt;li&gt;优化布局流程：减少嵌套层级、懒加载布局、合并重复布局。&lt;/li&gt;&#xA;&lt;li&gt;避免无效重绘：使用局部刷新机制。&lt;/li&gt;&#xA;&lt;li&gt;精确控制绘制范围：通过&lt;code&gt;Canvas.clipRect()&lt;/code&gt;限制绘制区域。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;getMeasuredWidth()与getWidth()区别&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;getMeasuredWidth()&lt;/strong&gt;：测量阶段后分配的宽度（含内边距）。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用时机：&lt;code&gt;onMeasure()&lt;/code&gt;后或&lt;code&gt;layout()&lt;/code&gt;前。&lt;/li&gt;&#xA;&lt;li&gt;特点：反映视图的期望宽度；若布局未强制改变尺寸，可能与&lt;code&gt;getWidth&lt;/code&gt;相同。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;getWidth()&lt;/strong&gt;：布局阶段后的最终可见宽度（屏幕实际值）。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;使用时机：&lt;code&gt;onLayout&lt;/code&gt;后。&lt;/li&gt;&#xA;&lt;li&gt;计算方式：&lt;code&gt;width = right - left&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;requestLayout()与invalidate()区别&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;requestLayout()&lt;/strong&gt;：请求整个视图树的测量（measure）和布局（layout）流程。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;触发场景：视图尺寸/位置变化、动态添加/移除子视图、&lt;code&gt;setVisibility()&lt;/code&gt;导致布局结构变化。&lt;/li&gt;&#xA;&lt;li&gt;执行流程：从当前视图向上回溯到根视图（如ViewRootImpl），依次执行measure → layout。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;invalidate()&lt;/strong&gt;：仅标记视图的局部区域为“脏区”，请求下一帧重绘该区域。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;触发场景：视图内容变化但不影响尺寸/位置（如&lt;code&gt;onDraw()&lt;/code&gt;依赖数据更新）。&lt;/li&gt;&#xA;&lt;li&gt;执行流程：标记脏区 → 加入重绘队列 → 下一帧VSync信号时调用&lt;code&gt;onDraw()&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;View坐标体系&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;getX()/getY()&lt;/strong&gt;：相对当前View左上角的局部坐标（触摸点在View内的位置）。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特点：与父容器无关；值可为负（如滑动超出View边界）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;getRawX()/getRawY()&lt;/strong&gt;：相对屏幕左上角的全局坐标。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特点：包含状态栏高度（&lt;code&gt;getRawY()&lt;/code&gt;从屏幕顶部算起）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;getLocationOnScreen()&lt;/strong&gt;：获取View左上角在屏幕上的绝对坐标。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;View生命周期关键方法&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;构造函数&lt;/strong&gt;：通过代码或XML创建View实例。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;onAttachedToWindow()&lt;/strong&gt;：View被添加到窗口时调用。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用途：初始化资源、注册监听器、启动动画。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;onDetachedFromWindow()&lt;/strong&gt;：View从窗口移除时调用（如Activity销毁）。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关键作用：释放资源、停止动画、注销监听器。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;onVisibilityChanged()&lt;/code&gt;可能在&lt;code&gt;onAttachedToWindow()&lt;/code&gt;前/后调用（如View初始化为&lt;code&gt;GONE&lt;/code&gt;）。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;onWindowFocusChanged()&lt;/code&gt;可能在&lt;code&gt;onDetachedFromWindow()&lt;/code&gt;后调用（避免在此访问资源）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;View性能优化&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;过度绘制：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;概念：GPU在一个像素点上绘制了多次的现象。系统默认允许2.5次（1x绘制 + 1.5x半透明混合）&lt;/li&gt;&#xA;&lt;li&gt;主要优化策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移除不必要的背景&lt;/li&gt;&#xA;&lt;li&gt;减少View的层级深度&lt;/li&gt;&#xA;&lt;li&gt;谨慎使用半透明或**&lt;code&gt;setLayerType(LAYER_TYPE_HARDWARE)&lt;/code&gt;**&lt;/li&gt;&#xA;&lt;li&gt;优化&lt;code&gt;clipRect&lt;/code&gt;和&lt;code&gt;quickReject&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;布局优化：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;概念：指测量和布局阶段的性能优化。CPU需要遍历View树计算每个View的大小和位置&lt;/li&gt;&#xA;&lt;li&gt;优化策略：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;减少嵌套层级&lt;/li&gt;&#xA;&lt;li&gt;使用高效布局标签（merge、include、ViewStub）&lt;/li&gt;&#xA;&lt;li&gt;优化&lt;code&gt;onMeasure&lt;/code&gt;/&lt;code&gt;onLayout&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;绘制优化：&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;概念：指实际调用View.onDraw方法渲染像素到屏幕的性能优化。CPU准备绘制指令 -&amp;gt;GPU执行绘制&lt;/li&gt;&#xA;&lt;li&gt;优化策略&#xA;&lt;ul&gt;&#xA;&lt;li&gt;优化onDraw()方法：避免内存分配(不在onDraw方法内实例化Paint、Path、Bitmap、Rect对象)，避免耗时操作、避免调用invalidate（避免递归/绘制请求），利用canvas.clipRect和canvas.quickReject(),优先使用矢量图代替位图，使用硬件加速支持的Canvas操作&lt;/li&gt;&#xA;&lt;li&gt;谨慎开启Hardware_Layer&lt;/li&gt;&#xA;&lt;li&gt;优化alpha通道和透明度&lt;/li&gt;&#xA;&lt;li&gt;优化Bitmap加载与显示&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;高级机制与原理&lt;/strong&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;硬件加速：将绘制指令交给GPU，但是部分api不支持&lt;/li&gt;&#xA;&lt;li&gt;SurfaceView与TextureView：todo&lt;/li&gt;&#xA;&lt;li&gt;view.post与Handler：todo&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;四事件分发机制&#34;&gt;四、事件分发机制&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;滑动实现方式&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;code&gt;scrollTo()&lt;/code&gt;/&lt;code&gt;scrollBy()&lt;/code&gt;&lt;/strong&gt;: scrollTo()是直接跳转到指定位置，scrollBy是相对移动，基于当前位置滑动指定偏移量&lt;/li&gt;&#xA;&lt;li&gt;通过&lt;code&gt;ViewDragHelper&lt;/code&gt;实现复杂拖拽: todo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;自定义下拉刷新控件&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;todo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;事件分发机制如何提升效率&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;todo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;嵌套滑动处理&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;todo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;RecyclerView的滑动冲突处理&lt;/strong&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;todo&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;五handler&#34;&gt;五、Handler&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;六性能优化-todo&#34;&gt;六、性能优化 （todo）&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;内存管理与泄漏排查&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;UI渲染性能(卡顿优化)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;启动速度优化&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;功耗优化基础&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;包体积优化&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;七常用库与框架todo&#34;&gt;七、常用库与框架（todo）&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;网络请求(如Retrofit)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;图片加载(如Glide / Picasso)&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Gradle基础&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;八网络与后台&#34;&gt;八、网络与后台&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;RESTful API概念与使用&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;异步处理深入（线程安全、后台限制）&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;缓存策略&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;九架构设计&#34;&gt;九、架构设计&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;MVVM/MVI理解与实践&lt;/li&gt;&#xA;&lt;li&gt;模块化 / 组件化&lt;/li&gt;&#xA;&lt;li&gt;设计模式应用&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;十新技术与趋势&#34;&gt;十、新技术与趋势&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Compose&lt;/li&gt;&#xA;&lt;li&gt;KMM / Flutter&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h4 id=&#34;十一jvm--内存模型基础&#34;&gt;十一、JVM / 内存模型基础&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;JVM内存结构&lt;/li&gt;&#xA;&lt;li&gt;垃圾回收机制基础&lt;/li&gt;&#xA;&lt;li&gt;常见数据结构与基础算法&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Categories</title>
      <link>http://localhost:1313/categories/</link>
      <pubDate>Wed, 11 Jun 2025 15:38:21 +0800</pubDate>
      <guid>http://localhost:1313/categories/</guid>
      <description></description>
    </item>
    <item>
      <title>RecyclerView缓存机制</title>
      <link>http://localhost:1313/android-develop/recyclerview%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 11 Jun 2025 15:26:57 +0800</pubDate>
      <guid>http://localhost:1313/android-develop/recyclerview%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;RecyclerView缓存机制&lt;/p&gt;&#xA;&lt;h4 id=&#34;多级缓存体系架构图&#34;&gt;&lt;strong&gt;多级缓存体系架构图&lt;/strong&gt;&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;TEXT&#xA;&#xA;RecyclerView 缓存系统&#xA;├── 1. 屏幕内缓存 (Attached Scrap)&#xA;│   └── 存放当前可见的ViewHolder（快速复用）&#xA;├── 2. 屏幕外缓存 (Cache)&#xA;│   └── 保存最近离开屏幕的ViewHolder（默认容量=2）&#xA;├── 3. 扩展缓存 (ViewCacheExtension)&#xA;│   └── 开发者自定义缓存（特殊用途）&#xA;└── 4. 回收池 (RecycledViewPool)&#xA;    └── 全局共享的ViewHolder存储（不同类型独立缓存）&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;根据&lt;code&gt;position&lt;/code&gt;判断是否命中&lt;code&gt;Cache&lt;/code&gt;，根据&lt;code&gt;viewType&lt;/code&gt;判断是否命中&lt;code&gt;RecyclerViewPool&lt;/code&gt;，会执行&lt;code&gt;onBindViewHolder&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;在 &lt;strong&gt;RecyclerView&lt;/strong&gt; 的回收复用机制中，&lt;code&gt;changedScrap&lt;/code&gt; 和 &lt;code&gt;attachedScrap&lt;/code&gt; 是两个关键临时缓存，而 &lt;strong&gt;Stable IDs&lt;/strong&gt; 会改变 ViewHolder 获取的方式。以下是详细解释：&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;1&#34;&gt;&lt;strong&gt;1. &lt;code&gt;changedScrap&lt;/code&gt; 的作用&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：专门配合 &lt;code&gt;notifyItemChanged()&lt;/code&gt; 或 &lt;code&gt;notifyDataSetChanged()&lt;/code&gt; 使用。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;当调用 &lt;code&gt;notifyItemChanged(position)&lt;/code&gt; 时，被标记更新的 item 会被临时移到 &lt;code&gt;changedScrap&lt;/code&gt; 中。&lt;/li&gt;&#xA;&lt;li&gt;在布局阶段（如 &lt;code&gt;onLayout&lt;/code&gt;），这些 ViewHolder 会被重新绑定数据（调用 &lt;code&gt;onBindViewHolder()&lt;/code&gt;），然后放回原位置。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：支持局部更新动画（如淡入淡出），避免直接回收导致视觉中断。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;2&#34;&gt;&lt;strong&gt;2. &lt;code&gt;attachedScrap&lt;/code&gt; 的作用&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;用途&lt;/strong&gt;：用于 &lt;strong&gt;快速复用可见或即将可见的 ViewHolder&lt;/strong&gt;。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;工作机制&lt;/strong&gt;：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;在布局过程中（如 &lt;code&gt;LinearLayoutManager.fill()&lt;/code&gt;），RecyclerView 会先将当前屏幕上的 ViewHolder &lt;strong&gt;临时移除&lt;/strong&gt; 到 &lt;code&gt;attachedScrap&lt;/code&gt;。&lt;/li&gt;&#xA;&lt;li&gt;遍历新布局时，直接从 &lt;code&gt;attachedScrap&lt;/code&gt; 中按 &lt;strong&gt;position 匹配&lt;/strong&gt; 取回 ViewHolder（无需创建或绑定）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;目的&lt;/strong&gt;：避免无效的创建/绑定，提升滚动性能（尤其在快速滑动时）。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h3 id=&#34;3-stable-ids-如何改变-viewholder-获取方式&#34;&gt;&lt;strong&gt;3. Stable IDs 如何改变 ViewHolder 获取方式&lt;/strong&gt;&lt;/h3&gt;&#xA;&lt;p&gt;当启用 &lt;strong&gt;Stable IDs&lt;/strong&gt;（通过 &lt;code&gt;setHasStableIds(true)&lt;/code&gt; + 重写 &lt;code&gt;getItemId()&lt;/code&gt;）时：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo Vercel博客配置</title>
      <link>http://localhost:1313/tutorials/hugo-vercel%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Wed, 11 Jun 2025 12:20:50 +0800</pubDate>
      <guid>http://localhost:1313/tutorials/hugo-vercel%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h4 id=&#34;前期准备&#34;&gt;前期准备&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;安装 Hugo&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# macOS (Homebrew)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;brew install hugo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;注册Vercel账号&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;创建本地博客&#34;&gt;创建本地博客&lt;/h4&gt;&#xA;&lt;h5 id=&#34;11-生成新站点&#34;&gt;1.1 生成新站点&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site myblog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd myblog&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;12-添加主题&#34;&gt;1.2 添加主题&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; config.toml  &lt;span style=&#34;color:#75715e&#34;&gt;# 配置主题&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;自定义域名&#34;&gt;自定义域名&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;在Vercel控制控制台 -&amp;gt; &lt;strong&gt;Settings&lt;/strong&gt; -&amp;gt; &lt;strong&gt;Domains&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;输入自己的域名(&lt;code&gt;dust-zed.site&lt;/code&gt;,可在阿里云购买)&lt;/li&gt;&#xA;&lt;li&gt;按提示配置DNS解析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;管理不同类型的文章&#34;&gt;管理不同类型的文章&lt;/h4&gt;&#xA;&lt;h5 id=&#34;31-使用物理目录分类&#34;&gt;3.1 使用物理目录分类&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;content/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── blog/           &lt;span style=&#34;color:#75715e&#34;&gt;# 常规博客&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── tutorials/      &lt;span style=&#34;color:#75715e&#34;&gt;# 教程类&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── reviews/        &lt;span style=&#34;color:#75715e&#34;&gt;# 产品评测&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── notes/          &lt;span style=&#34;color:#75715e&#34;&gt;# 学习笔记&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;32-创建对应类型文章&#34;&gt;3.2 创建对应类型文章&lt;/h5&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new tutorials/hugo-vercel博客配置.md&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;33-统一配置文件&#34;&gt;3.3 统一配置文件&lt;/h5&gt;&#xA;&lt;p&gt;在&lt;code&gt;config.toml&lt;/code&gt;中集中管理URL规则&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 所有文章默认路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# :slug动态代表内容的URL友好版本标题&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;permalinks&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;posts&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/blog/:year/:month/:slug/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;tutorials&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/learn/:slug/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;reviews&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/products/:category/:slug/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 分类页面路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;taxonomies&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;category&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;categories&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;tag&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;34-自动生成分类列表&#34;&gt;3.4 自动生成分类列表&lt;/h5&gt;&#xA;&lt;h4 id=&#34;升级维护&#34;&gt;升级维护&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;更新主题：&lt;code&gt;git submodule update --remote --merge&lt;/code&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
